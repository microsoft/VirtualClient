# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# ADO link: https://msazure.visualstudio.com/One/_apps/hub/ms.vss-build-web.ci-designer-hub?pipelineId=297462&branch=main

trigger:
  none
    
pr: none

resources:
  containers:
  - container: pmc-cli
    image: 'mcr.microsoft.com/pmc/pmc-cli:latest'
    options: --entrypoint=""

variables:
  VcVersion : 1.11.0
  ROOT: $(Build.SourcesDirectory)
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  ENABLE_PRS_DELAYSIGN: 1
  GitVersion.SemVer: ''

stages:
- stage: BuildPackage
  jobs:
  - job: BuildPackage
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UseDotNet@2
      continueOnError: false
      inputs:
        packageType: 'sdk'
        version: '6.0.406'
        useGlobalJson: false
        performMultiLevelLookup: true
        workingDirectory: '$(Build.SourcesDirectory)'

    - script: chmod -R +x $(Build.SourcesDirectory)
      displayName: 'Allow scripts to be executable on Linux'

      # Ensure the artifact output/bin/obj directories are clean.
    # - script: $(Build.SourcesDirectory)/clean.cmd
      # displayName: 'Clean Output Directories'
      
      # Build the repo.
    - script: $(Build.SourcesDirectory)/build.sh $(VcVersion) --build-all
      displayName: 'Build Solutions'

    - script: $(Build.SourcesDirectory)/src/VirtualClient/VirtualClient.Packaging/build-deb-linux-x64.sh $(VcVersion)
      displayName: 'Build deb package for linux x64'

    - script: $(Build.SourcesDirectory)/src/VirtualClient/VirtualClient.Packaging/build-deb-linux-arm64.sh $(VcVersion)
      displayName: 'Build deb package for linux arm64'

    - task: EsrpCodeSigning@1
      inputs:
        ConnectedServiceName: 'virtualclient-esrp'
        FolderPath: '$(Build.SourcesDirectory)/out/packages'
        Pattern: '*.deb'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
              {
                  "KeyCode" : "CP-450779-Pgp",
                  "OperationCode" : "LinuxSign",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
          ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
        
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/out/packages'
        artifactName: drop


  - job: PublishPackage
    condition: false
    dependsOn: BuildPackage
    pool:
      vmImage: 'ubuntu-latest'
    container: pmc-cli

    steps:
    - task: PipAuthenticate@1
      inputs:
        artifactFeeds: 'CRC-Dev'
    - script: pip install pmc-cli
        
    - task: AzureKeyVault@2
      inputs:
        ConnectedServiceName: 'VirtualClient-AzureRM-AME'
        KeyVaultName: 'junoprod01vault01'
        SecretsFilter: 'virtualclient-cert-pem'
        RunAsPreJob: true

    - task: PublishLinuxPackagesPMC@0
      inputs:
        profile: 'ppe' # or tux-dev or ppe or prod depending on what you selected
        msal_SNIAuth: 'msal-sniauth'
        msal_cert: $(virtualclient-cert-pem)
        msal_client_ID: 'f407a268-1184-4845-92b1-eebfbe0749c0'
        package_path: '$(Build.SourcesDirectory)/out/packages/*.deb'
        repository: 'virtualclient-apt'