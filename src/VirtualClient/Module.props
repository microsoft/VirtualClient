<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!--
    *****************************************************************************
    Set the module name and root path properties.
    *****************************************************************************
    -->
    <PropertyGroup>
        <ModuleName>$([MSBuild]::MakeRelative($([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Repo.props)), $(MSBuildThisFileDirectory)).TrimEnd('\'))</ModuleName>
        <ModulePath>$(MSBuildThisFileDirectory)</ModulePath>
		<PackagePreReleaseSuffix></PackagePreReleaseSuffix>
        <Platforms>AnyCPU;x64;ARM64</Platforms>
        <NoWarn>$(NoWarn);CS8632;NU5182</NoWarn>

		<!-- Use the Directory.Packages.props file in the root of the repo to define NuGet package versions. -->
		<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
    </PropertyGroup>

    <!--
    ******************************************************************************
    
    Adding AssemblyVersion in every project. 

    Note that the default AssemblyVersion below should be set to a major/minor version
    higher than the latest production release version as defined in the YAML files
    (e.g. /repo/.pipeline) and that is used in the Official builds. For example, if the
    major/minor version in the YAML file is set to 1.5.*, then the default version below
    should be set to 1.0.0.0. This helps to simplify the debugging experience for developers
    who are creating extensions to the Virtual Client by avoiding errors/warnings surfaced by
    the Visual Studio debugger around mismatched versions of common .dlls.
	
	Default build/assembly versions are defined in the VERSION file in the root of
	the repo. This version can be overridden on the command line by setting the
	'VCBuildVersion' environment variable before building.
	
	e.g.
	set VCBuildVersion=2.1.0
	build.cmd
    *****************************************************************************
    -->
	<Target Name="SetDefaultVersion" BeforeTargets="BeforeBuild" Condition="'$(AssemblyVersion)' == ''">
		<ReadLinesFromFile File="$(RepoPath)\VERSION">
			<Output TaskParameter="Lines" PropertyName="VersionFileValue" />
		</ReadLinesFromFile>

		<PropertyGroup>
			<AssemblyVersion>$(VersionFileValue)</AssemblyVersion>
		</PropertyGroup>
	</Target>

	<Target Name="SetFileVersionInformation" AfterTargets="SetDefaultVersion">

		<PropertyGroup>
			<AssemblyInformationalVersion>$(AssemblyVersion)</AssemblyInformationalVersion>
			<FileVersion>$(AssemblyVersion)</FileVersion>
			<InformationalVersion>$(AssemblyVersion)</InformationalVersion>
			<Product>Virtual Client Framework</Product>
			<Product Condition="'$(OutputType)' == 'Exe'">Virtual Client Platform</Product>
			<ProductName>Virtual Client</ProductName>
			<ProductVersion>$(AssemblyVersion)</ProductVersion>
		</PropertyGroup>
	</Target>

    <!--
    *****************************************************************************
    Import the build environment settings.  These settings define the paths that 
    will be used during build/compilation 
    
    (e.g. bin/output path, intermediates path, NuGet package cache path).
    *****************************************************************************
    -->
    <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Repo.props))\Repo.props" />
    <Import Project="$(ModulePath)\CodeQuality.targets" />
    <Import Project="$(BuildEnvToolsetsPath)\Documentation.targets" />

</Project>
