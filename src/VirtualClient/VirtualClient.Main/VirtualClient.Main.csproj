<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <OutputType>Exe</OutputType>
        <TargetFramework>net8.0</TargetFramework>
        <AssemblyName>VirtualClient</AssemblyName>
        <RootNamespace>VirtualClient</RootNamespace>
        <RuntimeIdentifiers>win-x64;linux-x64;win-arm64;linux-arm64</RuntimeIdentifiers>
        <RunAnalyzers>false</RunAnalyzers>
        <NoWarn>CA1416,NU5100,NU5118,NU5128,SA1118,NU5110,NU5111,IL2026,IL2104,IL2072</NoWarn>
        <SatelliteResourceLanguages>en</SatelliteResourceLanguages>
        <BuildPropertyOutput>true</BuildPropertyOutput>
    </PropertyGroup>

    <ItemGroup>
        <!-- Global package dependency versions are defined in the Module.props for the solution. -->
        <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="$(Microsoft_AspNetCore_Mvc_NewtonsoftJson_PackageVersion)" />
        <PackageReference Include="Microsoft.Win32.Registry" Version="$(Microsoft_Win32_Registry_PackageVersion)" />
        <PackageReference Include="System.CommandLine" Version="$(System_CommandLine_PackageVersion)" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\VirtualClient.Actions\VirtualClient.Actions.csproj" />
        <ProjectReference Include="..\VirtualClient.Api\VirtualClient.Api.csproj" />
        <ProjectReference Include="..\VirtualClient.Contracts\VirtualClient.Contracts.csproj" />
        <ProjectReference Include="..\VirtualClient.Dependencies\VirtualClient.Dependencies.csproj" />
        <ProjectReference Include="..\VirtualClient.Monitors\VirtualClient.Monitors.csproj" />
    </ItemGroup>

    <ItemGroup>
        <Folder Include="Properties\" />

        <None Update="appsettings.json">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>
    
    <!--
    Sets the target publish directory. In practice, this should be the same as the output path as there
    is no need to duplicate the build output into a separate directory. The build output directory and
    publish directory are the same.
    -->
    <Target Name="SetPublishDirectory" BeforeTargets="Build">     
        <PropertyGroup>
            <PublishDir>$(OutputPath)</PublishDir>
        </PropertyGroup>
    </Target>
    
    <!--
    Copies the profiles into the target output directory.
    -->
    <Target Name="CopyProfilesToOutputDirectory" AfterTargets="Build">
        <ItemGroup>
            <ProfileFiles Include="profiles\*.*" />
        </ItemGroup>

        <Copy SourceFiles="@(ProfileFiles)" DestinationFiles="@(ProfileFiles->'$(OutputPath)profiles\%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>
            
    <!--
    Copies "built-in" packages into the target output directory. These packages contain toolsets that
    we carry with a VC build so that they never need to be downloaded. In practice these are typically
    toolsets that are used often by the platform runtime itself or across numerous workload or monitoring
    components.
    -->
    <Target Name="CopyPackagesToOutputDirectory" AfterTargets="Build">
        <ItemGroup>
            <PackageFiles Include="packages\**\*.*" />
            <PackageFiles Include="packages\**\$(RuntimeIdentifier)\**\*.*" Condition="'$(RuntimeIdentifier)' != ''" />
            <VcpkgFiles Include="packages\**\*.vcpkg" />
        </ItemGroup>

        <Copy SourceFiles="@(PackageFiles)" DestinationFiles="@(PackageFiles->'$(OutputPath)packages\%(RecursiveDir)%(Filename)%(Extension)')" />
        <Copy SourceFiles="@(VcpkgFiles)" DestinationFiles="@(VcpkgFiles->'$(OutputPath)packages\%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>
    
    <!--
    Copies script/content files into the target output directory.
    -->
    <Target Name="CopyScriptsToOutputDirectory" AfterTargets="Build">
        <ItemGroup>
            <ScriptFiles Include="$(RepoPath)\out\scripts\**\*.*" />
        </ItemGroup>

        <Copy SourceFiles="@(ScriptFiles)" DestinationFiles="@(ScriptFiles->'$(OutputPath)scripts\%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>

    <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Module.props))\Module.props" />
    <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Module.props))\NuGetPackaging.targets" />

</Project>
