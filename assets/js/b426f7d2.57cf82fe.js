"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[2870],{5391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=t(5893),i=t(3905);const s={},o="Run Custom Scripts with Virtual Client",a={id:"developing/0021-run-custom-scripts",title:"Run Custom Scripts with Virtual Client",description:"The following section covers the steps to use custom scripts and test suites with Virtual Client, by just authoring custom profiles, thereby",source:"@site/docs/developing/0021-run-custom-scripts.md",sourceDirName:"developing",slug:"/developing/0021-run-custom-scripts",permalink:"/VirtualClient/docs/developing/0021-run-custom-scripts",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/developing/0021-run-custom-scripts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Developing Extensions",permalink:"/VirtualClient/docs/developing/0020-develop-extensions"},next:{title:"Workload Onboarding Process",permalink:"/VirtualClient/docs/developing/0030-workload-onboarding"}},l={},c=[{value:"Execution and Logging Requirements with the Test Suite/Script",id:"execution-and-logging-requirements-with-the-test-suitescript",level:2},{value:"Generic Executor Components for Scripts",id:"generic-executor-components-for-scripts",level:2},{value:"Profile Parameters",id:"profile-parameters",level:2},{value:"Logging and Metrics",id:"logging-and-metrics",level:2},{value:"Logging",id:"logging",level:3},{value:"Metrics",id:"metrics",level:3},{value:"Example Custom Profile",id:"example-custom-profile",level:2},{value:"Pre-Reads:",id:"pre-reads",level:4},{value:"Example",id:"example",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"run-custom-scripts-with-virtual-client",children:"Run Custom Scripts with Virtual Client"}),"\n",(0,r.jsx)(n.p,{children:'The following section covers the steps to use custom scripts and test suites with Virtual Client, by just authoring custom profiles, thereby\nwithout any code change in Virtual Client. Virtual Client provides multiple "Action" components that can be used to build a custom profile\nand run any script/test-suite. Virtual Client would have some expectations from the custom script/test-suite in terms of folder\nstructure for the script, logging and metrics parsing, which are covered in subsequent sections.'}),"\n",(0,r.jsx)(n.p,{children:"The document includes an example in the last section that shows the end to end steps of running a custom script/test-suite\nwith Virtual Client."}),"\n",(0,r.jsx)(n.h2,{id:"execution-and-logging-requirements-with-the-test-suitescript",children:"Execution and Logging Requirements with the Test Suite/Script"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Directory Structure"}),"\nThe script/test-suite, when being executed through Virtula Client would be expected to follow a standard directory structure that\nis used by all VC Workloads. VC supports four OS-platforms (win-x64, linux-x64, win-arm64 and linux-arm64). The script/test suites\nshould be placed in the suitabe directory. These will then be zipped to form the wokrload package, and can be uploaded on blob\npackage store, if the DownloadDependencyProvider needs to be used to download the package during VC Execution."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example directory structure:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"- workloadPackage \n  - linux-arm64\n    - <linux-arm64 based scripts>\n  - linux-x64\n    - <linux-x64 based scripts>\n  - win-x64\n    - <win-x64 based scripts>\n  - win-arm64\n    - <win-arm64 based scripts>\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Logging Requirements"}),"\nAll the execution logs that need to captured/uploaded to content Store, need to be provided as a parameter to the Action Component\n(Refer to examples in below sections). The parameter supports logs in a sub-folder within the workload package, or string pattern\nof respective log files."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Capturing Metrics"}),"\nIf the metrics are required to be captured for the test execution and sent to telemetry, then the script/tool would be expected to\nhave a parser that parses the required metrics from it\u2019s logs and have them enumerated in a standard metrics JSON file\n(called test-metrics.json) within the workload package folder. Virtual Client would be capturing the metrics from the JSON and\nusing it to process further for sending it over telemetry and attaching required metadata to it."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example test-metrics.json file:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "metric1": "0",\n    "metric2": "1.45",\n    "metric3": "1279854282929.09"\n}\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"generic-executor-components-for-scripts",children:"Generic Executor Components for Scripts"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/microsoft/VirtualClient/blob/main/src/VirtualClient/VirtualClient.Main/profiles/EXAMPLE-EXECUTE-SCRIPT.json",children:"Example Profile"})}),"\n",(0,r.jsx)(n.p,{children:"The following executor Components can be used to build profiles for executing the custom scripts and test-suites in Virtual Client."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ScriptExecutor"}),"\nThis Action can be used to execute bash, cmd, bat, shell scripts and executables."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'Example:\n"Actions": [\n    {\n        "Type": "ScriptExecutor",\n        "Parameters": {\n            "Scenario": "Name_Of_Scenario",\n            "CommandLine": "argument1 argument2",\n            "ScriptPath": "script.sh",\n            "LogPaths":  "*.log;*.txt;logSubFolder\\\\",\n            "ToolName":  "Name_Of_Tool",\n            "PackageName":  "exampleWorkload",\n            "FailFast":  false,\n            "Tags": "Test,VC,Script"\n        }\n    }\n]\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PowershellExecutor"}),"\nThis Action can be used to execute Powershell Scripts in Windows."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Please note Virtual Client should be run in elevated mode when using this component, as it sets the execution Policy to be bypass."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'Example:\n"Actions": [\n    {\n        "Type": "PowershellExecutor",\n        "Parameters": {\n            "Scenario": "Name_Of_Scenario",\n            "CommandLine": "argument1 argument2",\n            "ScriptPath": "script.ps1",\n            "LogPaths":  "*.log;*.txt;logSubFolder\\\\",\n            "ToolName":  "Name_Of_Tool",\n            "PackageName":  "exampleWorkload",\n            "FailFast":  false,\n            "Tags": "Test,VC,Script"\n        }\n    }\n]\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PythonExecutor"}),"\nThis Action can be used to execute Python Scripts in Windows and Linux. The Dependency Components in Virtual Client can be used to\ninstall python on the system. The following example shows the dependency components for Linux and Windows, one of them can be used\nas per the platform."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'Example:\n"Actions": [\n    {\n        "Type": "PythonExecutor",\n        "Parameters": {\n            "Scenario": "Name_Of_Scenario",\n            "CommandLine": "argument1 argument2",\n            "ScriptPath": "script.py",\n            "LogPaths":  "*.log;*.txt;logSubFolder\\\\",\n            "ToolName":  "Name_Of_Tool",\n            "PackageName":  "exampleWorkload",\n            "UsePython3": true,\n            "FailFast":  false,\n            "Tags": "Test,VC,Script"\n        }\n    }\n]\n\nPython installation in Linux:\n"Dependencies": [\n    {\n        "Type": "LinuxPackageInstallation",\n        "Parameters": {\n            "Scenario": "InstallLinuxPackages",\n            "Packages": "python3,python3-pip"\n        }\n    }\n]\n\nPython Installation in Windows using chocolatey\n"Dependencies": [\n    {\n        "Type": "ChocolateyInstallation",\n        "Parameters": {\n            "Scenario": "InstallChocolatey",\n            "PackageName": "chocolatey"\n        }\n    },\n    {\n        "Type": "ChocolateyPackageInstallation",\n        "Parameters": {\n            "Scenario": "InstallCygwin",\n            "PackageName": "chocolatey",\n            "Packages": "python3"\n        }\n    }\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"profile-parameters",children:"Profile Parameters"}),"\n",(0,r.jsx)(n.p,{children:"The following parameters are supported by the Executor Classes that can be modified in a custom profile to run the scripts."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Acceptable Type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Scenario"}),(0,r.jsx)(n.td,{children:"Name of the scenario"}),(0,r.jsx)(n.td,{children:"String"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ToolName"}),(0,r.jsx)(n.td,{children:"Name of the Script/Tool being executed"}),(0,r.jsx)(n.td,{children:"String"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CommandLine"}),(0,r.jsx)(n.td,{children:"The command line arguments to be used with the script/executable"}),(0,r.jsx)(n.td,{children:"String"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ScriptPath"}),(0,r.jsx)(n.td,{children:"Relative Path of the script inside the workload package that needs to be invoked."}),(0,r.jsx)(n.td,{children:"String"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LogPaths"}),(0,r.jsx)(n.td,{children:'A list of file/folder paths separated by semicolons ";". Refer to the Logging Section for more info.'}),(0,r.jsx)(n.td,{children:"String (List of Log files/folders separted by semicolon)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"PackageName"}),(0,r.jsx)(n.td,{children:"Name of the workload package built for running the script. If the workload package is being downloaded from blob package store, this needs to match with the package name defined in DependencyPackageInstallation."}),(0,r.jsx)(n.td,{children:"String"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FailFast"}),(0,r.jsx)(n.td,{children:"Flag indicates that the application should exit immediately on first/any errors regardless of their severity."}),(0,r.jsx)(n.td,{children:"Boolean"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"UsePython3"}),(0,r.jsx)(n.td,{children:'(Only valid for PythonExecutor) A true value indicates use of "python3" as environment variable to execute python, a false value will use "python" as the environment variable.'}),(0,r.jsx)(n.td,{children:"Boolean (Default is true)"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"logging-and-metrics",children:"Logging and Metrics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,r.jsx)(n.p,{children:'The \u201cLogPaths\u201d parameter of the generic executor determines the semicolon ";" separated logs sub-folders and log files.'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"For the sub-folder, the relative path to the sub-folder within the package directory needs to be provided.\nThen all files within the directory will be swept, and they will be uploaded to content store (if the contentstore --cs parameter\nis provided in Virtual Client) and will be moved to the central logs directory in Virtual Client."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"For the filePaths, each relative file path can be a pattern that will be matched within the workload Package directory. For example,\na pattern of *.txt will cover all txt files within the workload package directory and they will be swept, uploaded to content\nstore (if contentStore --cs parameter is provided) and will be moved to central logs directory."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example Central Logs Directory (for a win-x64 system):\n(VirtualClient root folder) > content > win-x64 > logs > toolName > scenarioName_TIMESTAMP"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,r.jsx)(n.p,{children:'The metrics capturing for the script/test-suite by Virtual Client would depend on the metric Parsing requirement. The script/test-suite\nwould be expected to parse the required metrics and save it in a json format in a file called "test-metrics.json",\nsaved in the workload package root folder. Thus, the actual metric parsing logic here is a responsibility of the test suite/script.\nIt will be expected to generate a metrics json file with key-value pairs, where each key represents a metric name and the\nvalue is the metric Value. Virtual Client will capture these metrics and will be sending it to telemetry for further actions.'}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-custom-profile",children:"Example Custom Profile"}),"\n",(0,r.jsx)(n.h4,{id:"pre-reads",children:"Pre-Reads:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://microsoft.github.io/VirtualClient/docs/guides/0011-profiles/",children:"Virtual Client Profiles"}),": Learn about profiles in Virtual Client"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://microsoft.github.io/VirtualClient/docs/developing/0010-develop-guide/",children:"Virtual Client Developer Guide"}),': Refer to the "Debug in Visual Studio by Running a Custom Profile" Section to know more about developing Custom Profiles.']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://microsoft.github.io/VirtualClient/docs/guides/0030-commercial-workloads/",children:"Virtual Client Workload Package"}),": Learn about creating workload packages and using it with DependencyPackageInstallation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Let us consider an example where a script called stress-memory is to be used with Virtual Client. There are two versions of the script\nfor Windows and Linux, stress-memory.cmd and stress-memory.sh respectively. The same binaries are for x64 and arm64 platforms.\nThey take an argument for timeout (-t) with value in seconds and -v is to be added for verbose logging."}),"\n",(0,r.jsx)(n.p,{children:"They produce multiple log files"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'traces-TIMESTAMP.txt is produced in a folder called "traces"'}),"\n",(0,r.jsx)(n.li,{children:"summary-TIMESTAMP.txt is produced in the root folder."}),"\n",(0,r.jsx)(n.li,{children:"There are two configuration files called config-1.json and config-2.json, both in the root folder."}),"\n",(0,r.jsx)(n.li,{children:"Also, the scripts parse the logs and generate metrics and store it in a file test-metrics.json in the root folder."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"All the 5 files are to be captured for logging."}),"\n",(0,r.jsx)(n.p,{children:"The Steps to followed for above example are:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Build a workload package for the scripts. The following directory structure for the zipped package can be followed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"- stressmemory.1.0.zip \n   - linux-arm64\n     - stress-memory.sh\n   - linux-x64\n     - stress-memory.sh\n   - win-x64\n     - stress-memory.cmd\n   - win-arm64\n     - stress-memory.cmd\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The stressmemory.1.0.zip should be uploaded to the package store for downloading the workload package during execution."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A custom profile ",(0,r.jsx)(n.code,{children:"(EXAMPLE-CUSTOM-PROFILE.json)"}),' needs to be authored and needs to be placed in the respective "profiles" directory.']}),"\n",(0,r.jsx)(n.p,{children:"Custom Profile for above example (win-x64)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'    {\n       "Description": "Memory Stress Script Executor",\n       "MinimumExecutionInterval": "00:00:05",\n       "Metadata": {\n           "SupportedPlatforms": "win-x64,win-arm64"\n       },\n       "Parameters": {\n           "CommandLine": "-t 600 -v",\n           "ScriptPath": "stress-memory.cmd",\n           "LogPaths":  "traces\\\\;summary-*.txt;*.json",\n           "ToolName":  "stressscript",\n           "PackageName":  "stresspackage",\n           "FailFast":  false\n       },\n       "Actions": [\n           {\n               "Type": "ScriptExecutor",\n               "Parameters": {\n                   "Scenario": "memory_stress_scenario",\n                   "CommandLine": "$.Parameters.CommandLine",\n                   "ScriptPath": "$.Parameters.ScriptPath",\n                   "LogPaths": "$.Parameters.LogPaths",\n                   "ToolName": "$.Parameters.ToolName",\n                   "PackageName": "$.Parameters.PackageName",\n                   "FailFast":  "$.Parameters.FailFast",\n                   "Tags": "Test,VC,Script"\n               }\n           }\n       ],\n       "Dependencies": [\n           {\n               "Type": "DependencyPackageInstallation",\n               "Parameters": {\n                   "Scenario": "InstallWorkloadPackage",\n                   "BlobContainer": "packages",\n                   "BlobName": "stressmemory.1.0.zip",\n                   "PackageName": "$.Parameters.PackageName",\n                   "Extract": true\n               }\n           }\n       ]\n   }\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The Virtual Client can be executed with the following command (assuming win-x64):\n",(0,r.jsx)(n.code,{children:'VirtualClient.exe --profile=EXAMPLE-CUSTOM-PROFILE.json --packages="https://virtualclient..." --debug --i=1'})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Once the execution is complete,"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The metrics would be available at:\n",(0,r.jsx)(n.code,{children:"<VirtualClientRootFolder>\\content\\win-x64\\logs\\metrics.csv"})]}),"\n",(0,r.jsxs)(n.li,{children:["The 5 files that were required to be captured, would be availabe at:\n",(0,r.jsx)(n.code,{children:"<VirtualClientRootFolder>\\content\\win-x64\\logs\\stressscript\\memory_stress_scenario_yyyyMMddHHmmss\\"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3905:(e,n,t)=>{t.d(n,{ah:()=>c});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),u=c(t),p=i,m=u["".concat(l,".").concat(p)]||u[p]||d[p]||s;return t?r.createElement(m,o(o({ref:n},h),{},{components:t})):r.createElement(m,o({ref:n},h))}));h.displayName="MDXCreateElement"}}]);