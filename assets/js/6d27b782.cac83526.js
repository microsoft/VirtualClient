"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[8451],{1246:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=i(4848),s=i(8453);const o={},r="Developing Extensions",l={id:"developing/0020-develop-extensions",title:"Developing Extensions",description:"The following sections cover the fundamentals to consider when developing extensions to the Virtual Client. Extensions refers to profiles or component",source:"@site/docs/developing/0020-develop-extensions.md",sourceDirName:"developing",slug:"/developing/0020-develop-extensions",permalink:"/VirtualClient/docs/developing/0020-develop-extensions",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/developing/0020-develop-extensions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Developer Guide",permalink:"/VirtualClient/docs/developing/0010-develop-guide"},next:{title:"Workload Onboarding Process",permalink:"/VirtualClient/docs/developing/0030-workload-onboarding"}},a={},c=[{value:"Platform Libraries",id:"platform-libraries",level:2},{value:"NuGet Packages/Libraries",id:"nuget-packageslibraries",level:4},{value:"Platform Requirements",id:"platform-requirements",level:2},{value:"Versioning Requirements",id:"versioning-requirements",level:2},{value:"Packaging Requirements",id:"packaging-requirements",level:2},{value:"How To Use/Integrate Extensions",id:"how-to-useintegrate-extensions",level:2},{value:"Place Extensions Directly in Virtual Client Application Folder",id:"place-extensions-directly-in-virtual-client-application-folder",level:3},{value:"Reference Extensions from Other Locations on the System",id:"reference-extensions-from-other-locations-on-the-system",level:3},{value:"Supported Environment Variables",id:"supported-environment-variables",level:4},{value:"Priority of Operations",id:"priority-of-operations",level:4},{value:"Downloaded Extensions from a Package Store",id:"downloaded-extensions-from-a-package-store",level:3},{value:"A Custom-Defined Bootstrap Profile is Used",id:"a-custom-defined-bootstrap-profile-is-used",level:3},{value:"How To Debug Extensions in Visual Studio",id:"how-to-debug-extensions-in-visual-studio",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"developing-extensions",children:"Developing Extensions"}),"\n",(0,t.jsx)(n.p,{children:"The following sections cover the fundamentals to consider when developing extensions to the Virtual Client. Extensions refers to profiles or component\nbinaries/.dlls containing actions, monitors, dependency handlers etc... that are developed in a separate repo/location than the Virtual Client platform/core\nrepo. Extensions allow development teams to add features to the Virtual Client runtime platform that are specialized towards their team's needs and charter.\nBefore getting started, it is helpful to familiarize yourself with the Virtual Client platform design and concepts."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/VirtualClient/docs/developing/0010-develop-guide",children:"General Developer Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/VirtualClient/docs/guides/0221-usage-extensions",children:"Integrating Extensions at Runtime"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The following example extensions repo can be used for reference to the details described within this guide."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://msazure.visualstudio.com/One/_git/CRC-VirtualClient-Examples",children:"CRC-VirtualClient-Examples Git Repo"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"platform-libraries",children:"Platform Libraries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h4,{id:"nuget-packageslibraries",children:"NuGet Packages/Libraries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VirtualClient.Framework"}),(0,t.jsx)(n.br,{}),"\n","Contains the fundamental classes and interfaces required to develop actions, monitors and dependency handlers for the Virtual Client."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VirtualClient.TestFramework"}),(0,t.jsx)(n.br,{}),"\n","Contains classes and interfaces that ease the task of writing unit and functional tests for extensions codebase."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n  <PropertyGroup>\n      <TargetFramework>net8.0</TargetFramework>\n      <RootNamespace>CRC.VirtualClient.Extensions</RootNamespace>\n  </PropertyGroup>\n\n  <ItemGroup>\n      <PackageReference Include="VirtualClient.Framework" Version="1.0.1900.660" />\n  </ItemGroup>\n\n  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Module.props))\\Module.props" />\n</Project>\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"platform-requirements",children:"Platform Requirements"}),"\n",(0,t.jsx)(n.p,{children:"The Virtual Client is a .NET 8.0 application. Assemblies containing extensions to the Virtual Client must likewise be built against the .NET 8.0 framework\nSDK. Assemblies compiled for the Virtual Client must have the term 'VirtualClient' in them. It is recommended that the following format be used when\nnaming your assemblies. This will help to avoid any conflicts with extensions produced by other teams."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Format:\n{TeamName}.VirtualClient.Extensions.{ComponentTypesWithin}.dll\n\n# Examples:\nCRC.VirtualClient.Extensions.Actions.dll\nCRC.VirtualClient.Extensions.Monitors.dll\nCRC.VirtualClient.Extensions.Dependencies.dll\n"})}),"\n",(0,t.jsx)(n.p,{children:"In addition, the following attribute must be added to a code file (typically an AssemblyInfo.cs file) within the each project that contains components\nthat when compiled can be used in the Virtual Client."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"# Contents of an AssemblyInfo.cs file.\n[assembly: VirtualClient.Contracts.VirtualClientComponentAssembly]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"versioning-requirements",children:"Versioning Requirements"}),"\n",(0,t.jsx)(n.p,{children:"The following section provides requirements to follow when considering versions of the platform libraries to reference. The VC Team follows a process of\nsemantic versioning with the Virtual Client runtime application and framework libraries. The versions of the assemblies/.dlls/.exes can be used to determine\nwhich version of the NuGet packages should be used. The following resource explains the versioning process."}),"\n",(0,t.jsx)(n.p,{children:"It is recommended that you follow the same \"semantic versioning\" strategy as is followed for the Virtual Client platform. The following examples\nillustrate versions of extensions (when compiled) that would be expected to work with a specific Virtual Client release. It is really only the\n'major' and 'minor' versions that are important here. The following table illustrates the general idea."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"VirtualClient.Framework Library Version"}),(0,t.jsx)(n.th,{children:"Supported VirtualClient.exe Versions"}),(0,t.jsx)(n.th,{children:"Version to use for Extensions Library Builds"}),(0,t.jsx)(n.th,{children:"Examples"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1.0.* (e.g. 1.0.1900.660)"}),(0,t.jsx)(n.td,{children:"1.0.* (e.g. 1.0.1930.665)"}),(0,t.jsx)(n.td,{children:"1.0.* (e.g. 1.0.0.0)"}),(0,t.jsx)(n.td,{children:"VirtualClient.exe version 1.0.1900.660 will support framework library versions from 1.0.0.0 to < 1.1.0.0. The framework versions will almost always have a version similar to the runtime .exe version; however, this illustrates the idea of the version range supported."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1.1.* (e.g. 1.1.1950.120)"}),(0,t.jsx)(n.td,{children:"1.1.* (e.g. 1.1.1960.125)"}),(0,t.jsx)(n.td,{children:"1.1.* (e.g. 1.1.0.0)"}),(0,t.jsx)(n.td,{children:"VirtualClient.exe version 1.1.1950.120 will support framework library versions from 1.1.0.0 to < 1.2.0.0."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2.0.* (e.g. 2.0.2000.500)"}),(0,t.jsx)(n.td,{children:"2.0.* (e.g. 2.0.2001.505)"}),(0,t.jsx)(n.td,{children:"2.0.* (e.g. 2.0.0.0)"}),(0,t.jsx)(n.td,{children:"VirtualClient.exe version 2.0.2000.500 will support framework library versions from 2.0.0.0 to < 2.1.0.0."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2.1.* (e.g. 2.1.2100.100)"}),(0,t.jsx)(n.td,{children:"2.1.* (e.g. 2.1.2200.300)"}),(0,t.jsx)(n.td,{children:"2.1.* (e.g. 2.1.0.0)"}),(0,t.jsx)(n.td,{children:"VirtualClient.exe version 2.1.2100.100 will support framework library versions from 2.1.0.0 to < 2.2.0.0."})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"packaging-requirements",children:"Packaging Requirements"}),"\n",(0,t.jsx)(n.p,{children:"Virtual Client extensions are loaded into runtime execution via dependency packages similarly to the way that other types of dependencies\n(e.g. workload binaries, scripts etc...) are integrated. A Virtual Client dependency package is nothing more than a structured .zip file\nthat contains the files required for a particular dependency. Dependency packages allow Virtual Client to support a number of different scenarios\nincluding those that are disconnected from the internet. Additionally, they enable each version of the Virtual Client to operate using exact/known\nbinaries, scripts etc... This is an important concept both for producing repeatable results as well as for simplifying deployment and setup requirements."}),"\n",(0,t.jsx)(n.p,{children:"For extensions packages, the following illustrates the expected folder structure and contents. Note that you do not have to compile your libraries\nspecifically for the platform/architectures noted below. Compilation against 'AnyCPU' is sufficient to keep things simple. An extensions package\nwill have the following content."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Package Definition File"}),(0,t.jsx)(n.br,{}),"\n","A package definition is a simple JSON file that is placed in the root directory of the package that defines the name and description of the\npackage, its version and any metadata properties desired. In this way, Virtual Client packages are \"self-describing\". This file should typically be\nnamed the same as the 'name' property within its contents and MUST have a ",(0,t.jsx)(n.strong,{children:".vcpkg"})," extension. Additionally, the 'metadata' should contain a property\nnamed ",(0,t.jsx)(n.strong,{children:"extensions"})," that is set to true."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'# Example contents of the package definition file named \'crcvcextensions.vcpkg\'.\n{\n  "name": "crcvcextensions",\n  "description": "VC Team Virtual Client extensions.",\n  "version": "1.0.1",\n  "metadata": {\n      "extensions": true\n  }\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Profile Extensions"}),(0,t.jsx)(n.br,{}),"\n","Profile extensions are not required. If they exist, the files should be placed inside of the appropriate folder for each platform/architecture supported\n(e.g. win-x64, linux-x64) in a folder named ",(0,t.jsx)(n.strong,{children:"profiles"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Binary/.dll Extensions"}),(0,t.jsx)(n.br,{}),"\n","Binary extensions are not required. If they exist, the binary/.dll extensions should be placed inside of the appropriate folder for each platform/architecture supported\n(e.g. win-x64, linux-x64)."]}),"\n",(0,t.jsx)(n.p,{children:"The following illustrates the folder structure expected for an extensions package called 'crc.vc.extensions'."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:" -------------------------------------------------------------------\n # Folder Structure\n -------------------------------------------------------------------\n /crc.vc.extensions\n    crcvcextensions.vcpkg\n        A Virtual Client package (.vcpkg) definition that has a metadata property called 'extensions' set to true. This file should exist\n        in the root directory of the package.\n              \n    /linux-arm64\n          {binaries}\n              Any additional binaries that can be used on Linux/ARM64 systems are placed directly in the linux-arm64 folder.\n              \n          /profiles\n              Folder contains any additional profiles that can be used on Linux/ARM64 systems.\n\n    /linux-x64\n          {binaries}\n              Any additional binaries that can be used on Linux/x64 systems are placed directly in the linux-x64 folder.\n              \n          /profiles\n              Folder contains any additional profiles that can be used on Linux/x64 (Intel, AMD) systems.\n           \n    /win-arm64\n          {binaries}\n              Any additional binaries that can be used on Windows/ARM64 systems are placed directly in the win-arm64 folder.\n              \n          /profiles\n              Folder contains any additional profiles that can be used on Windows/ARM64 systems.\n        \n    /win-x64\n          {binaries}\n              Any additional binaries that can be used on Windows/x64 systems are placed directly in the win-x64 folder.\n              \n          /profiles\n              Folder contains any additional profiles that can be used on Windows/x64 (Intel, AMD) systems.\n\n -------------------------------------------------------------------\n # Example \n -------------------------------------------------------------------\n /crc.vc.extensions\n /crc.vc.extensions/crcvcextensions.vcpkg\n\n # binaries...\n /crc.vc.extensions/linux-arm64/CRC.VirtualClient.Extensions.Actions.dll\n /crc.vc.extensions/linux-arm64/CRC.VirtualClient.Extensions.Actions.pdb\n /crc.vc.extensions/linux-x64/CRC.VirtualClient.Extensions.Actions.dll\n /crc.vc.extensions/linux-x64/CRC.VirtualClient.Extensions.Actions.pdb\n /crc.vc.extensions/win-arm64/CRC.VirtualClient.Extensions.Actions.dll\n /crc.vc.extensions/win-arm64/CRC.VirtualClient.Extensions.Actions.pdb\n /crc.vc.extensions/win-x64/CRC.VirtualClient.Extensions.Actions.dll\n /crc.vc.extensions/win-x64/CRC.VirtualClient.Extensions.Actions.pdb\n\n # profiles...\n /crc.vc.extensions/linux-arm64/profiles/EXAMPLE-WORKLOAD-PROFILE.json\n /crc.vc.extensions/linux-x64/profiles/EXAMPLE-WORKLOAD-PROFILE.json\n /crc.vc.extensions/win-arm64/profiles/EXAMPLE-WORKLOAD-PROFILE.json\n /crc.vc.extensions/win-x64/profiles/EXAMPLE-WORKLOAD-PROFILE.json\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-to-useintegrate-extensions",children:"How To Use/Integrate Extensions"}),"\n",(0,t.jsx)(n.p,{children:"Once extensions have been developed and an extensions package exists, they can be used in the Virtual Client runtime. See the following documentation\nfor details on how to integrate extensions into the runtime."}),"\n",(0,t.jsx)(n.h3,{id:"place-extensions-directly-in-virtual-client-application-folder",children:"Place Extensions Directly in Virtual Client Application Folder"}),"\n",(0,t.jsx)(n.p,{children:"The simplest way to integrate extensions binaries, profiles or packages into Virtual Client is to copy the files directly to the Virtual Client application\ndirectory (e.g. /virtualclient, /virtualclient/profiles, /virtualclient/packages)."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Extensions binaries/.dlls can be placed directly in the root directory of the Virtual Client application (i.e. right beside the VirtualClient executable)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Given an installation location /home/users/virtualclient, the binaries/.dlls \n# can be copied into the root directory directly.\n#\n/home/users/virtualclient/Custom.VirtualClient.Extensions.Actions.dll\n/home/users/virtualclient/Custom.VirtualClient.Extensions.Dependencies.dll\n/home/users/virtualclient/Custom.VirtualClient.Extensions.Monitors.dll\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Extensions profiles can be placed directly in the Virtual Client 'profiles' directory alongside the existing/out-of-box profiles."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Given an installation location /home/users/virtualclient, the profiles \n# can be copied into the 'profiles' directory directly.\n#\n/home/users/virtualclient/profiles/PERF-CUSTOM-WORKLOAD-A.json\n/home/users/virtualclient/profiles/PERF-CUSTOM-WORKLOAD-B.json\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Extensions packages can be placed directly in the Virtual Client 'packages' directory."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Given an installation location /home/users/virtualclient, the packages \n# can be copied into the 'packages' directory directly.\n/home/users/virtualclient/packages/customworkload_a.1.0.0.zip\n/home/users/virtualclient/packages/customworkload_b.1.0.0.zip\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"reference-extensions-from-other-locations-on-the-system",children:"Reference Extensions from Other Locations on the System"}),"\n",(0,t.jsx)(n.p,{children:"Virtual Client enables the user/developer to define additional locations to look for extensions during execution startup. To do so, the user/developer can set\ncustom environment variables on the system to provide Virtual Client with the alternate locations. Virtual Client will look for dependencies in both the default\nlocations (normal operation) as well as within these alternate locations."}),"\n",(0,t.jsx)(n.h4,{id:"supported-environment-variables",children:"Supported Environment Variables"}),"\n",(0,t.jsx)(n.p,{children:"The following environment variables can be used to define alternate locations for dependencies:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VC_LIBRARY_PATH"}),(0,t.jsx)(n.br,{}),"\n","Defines 1 or more path locations where extensions assemblies/.dlls exist and that should be loaded at runtime. Multiple directory paths can be defined separated\nby a semi-colon ';' character (similar to the Windows and Linux ",(0,t.jsx)(n.code,{children:"PATH"})," environment variable). Note that Virtual Client will search the immediate directory only\nfor extension assemblies/.dlls. Recursive subdirectory searches are not supported."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Example Folder Contents:\n# /VirtualClient.Extensions.Actions\n#      /VirtualClient.Extensions.Actions.dll\n#      /VirtualClient.Extensions.Actions.pdb\n#\n# /VirtualClient.Extensions.Monitors\n#      /VirtualClient.Extensions.Monitors.dll\n#      /VirtualClient.Extensions.Monitors.pdb\n#\n# On Windows systems\nC:\\VirtualClient> set VC_LIBRARY_PATH=C:\\Extensions\\VirtualClient.Extensions.Actions\nC:\\VirtualClient> set VC_LIBRARY_PATH=C:\\Extensions\\VirtualClient.Extensions.Actions;C:\\Extensions\\VirtualClient.Extensions.Monitors\n\n# On Linux systems.\n/home/user/virtualclient$ export VC_LIBRARY_PATH=/home/user/Extensions/VirtualClient.Extensions.Actions\n/home/user/virtualclient$ export VC_LIBRARY_PATH=/home/user/Extensions/VirtualClient.Extensions.Actions;/home/user/Extensions/VirtualClient.Extensions.Monitors\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VC_PACKAGES_PATH"}),(0,t.jsx)(n.br,{}),"\n","Defines 1 or more path locations where Virtual Client packages (including extensions packages) exist. Multiple directory paths can be defined separated by a semi-colon ';' character (similar to the Windows\nand Linux ",(0,t.jsx)(n.code,{children:"PATH"})," environment variable). Note that Virtual Client will search the immediate directory only for packages. Recursive subdirectory searches are\nnot supported."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Example Folder Contents:\n# /CustomPackages1\n#      /customworkload_a.1.0.0.zip\n#      /customworkload_b.1.0.0.zip\n#\n# /CustomPackages2\n#      /customworkload_c.1.0.0.zip\n#      /customworkload_d.1.0.0.zip\n#\n# On Windows systems\nC:\\VirtualClient> set VC_PACKAGES_PATH=C:\\CustomPackages1\nC:\\VirtualClient> set VC_PACKAGES_PATH=C:\\CustomPackages1;C:\\CustomPackages2;\n\n# On Linux systems.\n/home/user/virtualclient$ export VC_PACKAGES_PATH=/home/user/CustomPackages1\n/home/user/virtualclient$ export VC_PACKAGES_PATH=/home/user/CustomPackages1;/home/user/CustomPackages2\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VC_PROFILES_PATH"}),(0,t.jsx)(n.br,{}),"\n","Defines 1 or more path locations where extensions profiles exist and that should be available for use during execution. Multiple directory paths can be defined separated\nby a semi-colon ';' character (similar to the Windows and Linux ",(0,t.jsx)(n.code,{children:"PATH"})," environment variable). Note that Virtual Client will search the immediate directory only for extension\nprofiles. Recursive subdirectory searches are not supported."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Example Folder Contents:\n# /CustomProfiles1\n#      /PERF-CUSTOM-WORKLOAD-A.json\n#      /PERF-CUSTOM-WORKLOAD-B.json\n#\n# /CustomProfiles2\n#      /PERF-CUSTOM-WORKLOAD-C.json\n#      /PERF-CUSTOM-WORKLOAD-D.json\n#\n# On Windows systems\nC:\\VirtualClient> set VC_PROFILES_PATH=C:\\CustomPackages1\nC:\\VirtualClient> set VC_PROFILES_PATH=C:\\CustomPackages1;C:\\CustomPackages2;\n\n# On Linux systems.\n/home/user/virtualclient$ export VC_PROFILES_PATH=/home/user/CustomProfiles1\n/home/user/virtualclient$ export VC_PROFILES_PATH=/home/user/CustomProfiles1;/home/user/CustomProfiles2\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"priority-of-operations",children:"Priority of Operations"}),"\n",(0,t.jsx)(n.p,{children:"Given multiple of these environment variables are defined at the same time, Virtual Client will perform the search (and load/install) operations in the\nfollowing way:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Priority for extensions packages and binaries/.dlls:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['Packages with "extensions" in the default Virtual Client ',(0,t.jsx)(n.code,{children:"/packages"})," folder are installed. This includes assemblies/.dlls and profiles extensions."]}),"\n",(0,t.jsxs)(n.li,{children:['Packages with "extensions" in directories defined in the ',(0,t.jsx)(n.code,{children:"VC_PACKAGES_PATH"})," environment variable are installed. This includes assemblies/.dlls and profiles extensions.\nHowever, packages that exist in the ",(0,t.jsx)(n.code,{children:"/packages"})," folder have precedence. Duplicate packages found in the paths defined by this environment variable will be ignored."]}),"\n",(0,t.jsxs)(n.li,{children:["Binaries/.dlls in directories defined in the ",(0,t.jsx)(n.code,{children:"VC_LIBRARY_PATH"})," environment variable are loaded into the runtime unless a duplicate (by name) is already loaded.\nDuplicate binaries/.dlls in the paths defined by this environment variable will be ignored."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Priority for extensions profile:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Profiles that are in the default Virtual Client ",(0,t.jsx)(n.code,{children:"packages"})," folder have highest precedence."]}),"\n",(0,t.jsxs)(n.li,{children:["Profiles in directories defined in the ",(0,t.jsx)(n.code,{children:"VC_PROFILES_PATH"})," environment variable have secondary precedence."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"downloaded-extensions-from-a-package-store",children:"Downloaded Extensions from a Package Store"}),"\n",(0,t.jsxs)(n.p,{children:["The default for most Virtual Client scenarios is to download extensions from a package store. The ",(0,t.jsx)(n.strong,{children:"VirtualClient bootstrap"})," command can be used to download\nextensions from a package store and install them."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Package/Blob Store Structure\n/container=packages/blob=crc.vc.extensions.zip\n\n# Execute bootstrap command to download and install the extensions\nC:\\Users\\Any\\VirtualClient> VirtualClient.exe bootstrap --package=crc.vc.extensions.zip --name=crcvcextensions --packages="{BlobStoreConnectionString|SAS URI}"\n \n# Execute an extensions profile\nC:\\Users\\Any\\VirtualClient> VirtualClient.exe --profile=EXAMPLE-WORKLOAD-PROFILE.json --timeout=1440 --packages="{BlobStoreConnectionString|SAS URI}"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"a-custom-defined-bootstrap-profile-is-used",children:"A Custom-Defined Bootstrap Profile is Used"}),"\n",(0,t.jsx)(n.p,{children:"The developer can choose to use a custom profile for bootstrapping/installing extensions as well."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'# Profile = BOOTSTRAP-EXTENSIONS.json\n{\n  "Description": "Installs extensions from a package store.",\n  "Dependencies": [\n      {\n          "Type": "DependencyPackageInstallation",\n          "Parameters": {\n              "Scenario": "InstallCRCExtensionsPackage",\n              "BlobContainer": "packages",\n              "BlobName": "crc.vc.extensions.zip",\n              "PackageName": "crcvcextensions",\n              "Extract": true\n          }\n      }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"...Then you can use it! Note that the profile can exist in another directory location and be referenced by the path to the file (full or relative path)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Package/Blob Store Structure\n/container=packages/blob=crc.vc.extensions.zip\n\n# 1) Execute Bootstrap Command\n/VirtualClient/VirtualClient.exe --profile=S:\\Some\\Other\\Folder\\BOOTSTRAP-EXTENSIONS.json --dependencies --packages="{BlobStoreConnectionString|SAS URI}"\n\n# 2) Execute Extensions Profile\n/VirtualClient/VirtualClient.exe --profile=EXAMPLE-WORKLOAD-PROFILE.json --timeout=1440\n'})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-debug-extensions-in-visual-studio",children:"How To Debug Extensions in Visual Studio"}),"\n",(0,t.jsxs)(n.p,{children:['This next section is going to cover the topic of debugging Virtual Client extensions. It is very helpful at times when doing development work to have\nthe ability to run the Virtual Client runtime executable while enabling the ability to step through the code line by line. For this section, we will be\nlooking at how to do this using the Visual Studio IDE and facilities that it has to make debugging easier. Make sure to review the section "Debugging Virtual Client Code"\nat the bottom of the ',(0,t.jsx)(n.a,{href:"/VirtualClient/docs/developing/0010-develop-guide",children:"General Developer Guide"})," for more information on debugging."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Debug Using Unit/Functional Tests"}),(0,t.jsx)(n.br,{}),"\n","This option is documented in the general developer guide. The technique is the same for debugging extensions as it is for any other component."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Debug by Running a Custom Profile #1"}),(0,t.jsx)(n.br,{}),"\n","The preliminary setup for this option is the same as what is documented in the general developer guide in the section on debugging at the bottom. There are a few extra steps here\nwhere the developer must provide the Visual Studio runtime with a hint as to where to find the extensions binaries. We will be essentially setting up Visual Studio to run an instance of\nthe VirtualClient.exe on the system and supplying it with the location of the extensions binaries."]}),"\n",(0,t.jsx)(n.p,{children:'Note that in this scenario, we are executing the debugging scenario from Visual Studio in the extensions project. It is a good idea (for consistency) to reference a\n"just-built" version of the Virtual Client runtime executable in many cases. This is typically done by cloning the Virtual Client platform repo, building it and referencing the\nVirtualClient.exe from the built output location (e.g. /{repoDir}/out/bin/Debug/x64/VirtualClient.Main/net8.0/VirtualClient.exe).'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'# A custom profile is created and placed on the file system somewhere (typically somewhere outside of the source directory). In this profile, the\n# custom action/executor component is added to the actions.\n{\n  "Description": "Debug Custom Workload Executor",\n  "Actions": [\n      {\n          "Type": "CustomWorkloadExecutor",\n          "Parameters": {\n              "Scenario": "Scenario1",\n              "Duration": "00:00:10",\n              "ExampleParameter1": "AnyValue1",\n              "ExampleParameter2": 4567,\n              "PackageName": "exampleworkload",\n              "Tags": "Test,VC"\n          }\n      }\n  ],\n  "Dependencies": [\n      {\n          "Type": "DependencyPackageInstallation",\n          "Parameters": {\n              "Scenario": "InstallExampleWorkloadPackage",\n              "BlobContainer": "packages",\n              "BlobName": "exampleworkload.1.0.0.zip",\n              "PackageName": "exampleworkload",\n              "Extract": true\n          }\n      }\n  ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The Virtual Client platform allows the developer to define a custom environment variable ",(0,t.jsx)(n.strong,{children:"VC_LIBRARY_PATH"})," to provide an extra location\nto search for binaries that contain Virtual Client components. This environment variable should be set to the build output path for your extensions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"e.g.\n\n# Example output directory for extensions\nS:\\one\\crc-virtualclient-examples\\out\\bin\\Release\\AnyCPU\\CRC.VirtualClient.Extensions.Actions\\net8.0\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Setup Visual Studio for debugging:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Set the solution configuration to ",(0,t.jsx)(n.strong,{children:"Debug"})," at the top of the Visual Studio IDE window."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Set the extensions project containing the code to debug as the startup project. To do so, right-click on the project in the Solution Explorer and select\n",(0,t.jsx)(n.strong,{children:"Set as Startup Project"})," from the context menu."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Right-click on the VirtualClient.Main project and open the ",(0,t.jsx)(n.strong,{children:"Debug"})," options. Set the following information."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Launch = Executable"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Executable = {PathToVirtualClientExe}",(0,t.jsx)(n.br,{}),"\n","(e.g. ",(0,t.jsx)(n.code,{children:"S:\\one\\crc-air-workloads\\out\\bin\\Debug\\x64\\VirtualClient.Main\\net8.0\\VirtualClient.exe"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Application arguments = {VirtualClientCommandLine}",(0,t.jsx)(n.br,{}),"\n","(e.g. ",(0,t.jsx)(n.code,{children:'--profile=S:\\one\\debugging\\DEBUG-EXAMPLE-WORKLOAD.json --profile=MONITORS.NONE.json --packages="https://virtualclient..."'}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Environment variables = Add the ",(0,t.jsx)(n.code,{children:"VC_LIBRARY_PATH"})," variable and the path to your built extensions binaries.",(0,t.jsx)(n.br,{}),"\n","(e.g. ",(0,t.jsx)(n.code,{children:"VC_LIBRARY_PATH = S:\\one\\crc-virtualclient-examples\\out\\bin\\Debug\\x64\\CRC.VirtualClient.Extensions.Actions\\net8.0"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Place a breakpoint in the code where you like (e.g. in the InitializeAsync or ExecuteAsync methods of your component)."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Click the play/continue button at the top-center of the Visual Studio IDE window (or press the F5 key)."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);