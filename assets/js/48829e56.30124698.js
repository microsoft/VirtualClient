"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[2690],{3509:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>a,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=r(4848),n=r(8453);const i={},d="Atop",c={id:"monitors/0001-atop",title:"Atop",description:"Atop is a toolset that enables support for capturing performance information on Unix/Linux systems. This information is used in the Virtual Client to",source:"@site/docs/monitors/0001-atop.md",sourceDirName:"monitors",slug:"/monitors/0001-atop",permalink:"/VirtualClient/docs/monitors/0001-atop",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/monitors/0001-atop.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Monitors",permalink:"/VirtualClient/docs/category/monitors"},next:{title:"Performance Counter Metrics",permalink:"/VirtualClient/docs/monitors/0100-perf-counter-metrics"}},h={},l=[{value:"Supported Platforms",id:"supported-platforms",level:2},{value:"Atop Output Description",id:"atop-output-description",level:2}];function o(e){const t={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"atop",children:"Atop"}),"\n",(0,s.jsx)(t.p,{children:"Atop is a toolset that enables support for capturing performance information on Unix/Linux systems. This information is used in the Virtual Client to\nto formulate a performance counter base. The Atop toolset is integrated into the Virtual Client platform as a background monitor called the PerfCounterMonitor and is part of the default monitors for the\nVirtual Client. Performance counters are sampled every 1 second during the monitor frequency interval noted in the parameters below. At the\nend of this monitor frequency interval, the performance counter samples are aggregated and then emitted. Most of the aggregations are averages;\nhowever, there are a few counters that track the min, max and median of the samples during the frequency interval. The monitor frequency can be\nadjusted to change the precision of the counter samples window."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://manpages.debian.org/testing/atop/atop.1.en.html",children:"Atop Documentation"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/VirtualClient/docs/monitors/0100-perf-counter-metrics",children:"Counters Captured"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"supported-platforms",children:"Supported Platforms"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"linux-x64"}),"\n",(0,s.jsx)(t.li,{children:"linux-arm64"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"atop-output-description",children:"Atop Output Description"}),"\n",(0,s.jsx)(t.p,{children:"The following section describes the various counters/metrics that are available with the Atop toolset. Note that for consistency with other performance\ncounter toolsets used by the Virtual Client across Windows and Unix/Linux systems, these performance metrics are mapped to performance counter names\nthat are similar in format to those captured on Windows systems. See the link at the top for more details on the exact performance counters that are captured."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://manpages.debian.org/testing/atop/atop.1.en.html#OUTPUT_DESCRIPTION_-_SYSTEM_LEVEL",children:"https://manpages.debian.org/testing/atop/atop.1.en.html#OUTPUT_DESCRIPTION_-_SYSTEM_LEVEL"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric Name"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-sys"}),(0,s.jsx)(t.td,{children:"Total cpu time consumed in system mode ('sys')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-user"}),(0,s.jsx)(t.td,{children:"Total cpu time consumed in user mode ('user')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-#proc"}),(0,s.jsx)(t.td,{children:"The total number of processes present at this moment ('#proc')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-#trun"}),(0,s.jsx)(t.td,{children:"The total number of threads present at this moment in state 'running' ('#trun')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-#tslpi"}),(0,s.jsx)(t.td,{children:"'sleeping interruptible' ('#tslpi')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-#tslpu"}),(0,s.jsx)(t.td,{children:"'sleeping uninterruptible' ('#tslpu')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-#zombie"}),(0,s.jsx)(t.td,{children:"The number of zombie processes ('#zombie')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-clones"}),(0,s.jsx)(t.td,{children:"The number of clone system calls ('clones')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-#zombie"}),(0,s.jsx)(t.td,{children:"The number of zombie processes ('#zombie')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PRC-#exit"}),(0,s.jsx)(t.td,{children:"The number of processes that ended during the interval ('#exit') when process accounting is used. Instead of '#exit' the last column may indicate that process accounting could not be activated ('no procacct')."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Processor Information(_Total)% System Time"}),(0,s.jsx)(t.td,{children:"The percentage of cpu time spent in kernel mode by all active processes ('sys')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Processor Information(_Total)% User Time"}),(0,s.jsx)(t.td,{children:"The percentage of cpu time consumed in user mode ('user') for all active processes (including processes running with a nice value larger than zero)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Processor Information(_Total)% IRQ Time"}),(0,s.jsx)(t.td,{children:"The percentage of cpu time spent for interrupt handling ('irq') including softirq"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Processor Information(_Total)% Idle Time"}),(0,s.jsx)(t.td,{children:"The percentage of unused cpu time while no processes were waiting for disk I/O ('idle')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-wait"}),(0,s.jsx)(t.td,{children:"The percentage of unused cpu time while at least one process was waiting for disk I/O ('wait').In case of per-cpu occupation, the cpu number and the wait percentage ('w') for that cpu. The number of lines showing the per-cpu occupation can be limited."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-steal"}),(0,s.jsx)(t.td,{children:"For virtual machines, the steal-percentage ('steal') shows the percentage of cpu time stolen by other virtual machines running on the same hardware."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-guest"}),(0,s.jsx)(t.td,{children:"For physical machines hosting one or more virtual machines, the guest-percentage ('guest') shows the percentage of cpu time used by the virtual machines. Notice that this percentage overlaps the user percentage!"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-ipc"}),(0,s.jsx)(t.td,{children:"When PMC performance monitoring counters are supported by the CPU and the kernel (and atop runs with root privileges), the number of instructions per CPU cycle ('ipc') is shown. The first sample always shows the value 'initial', because the counters are just activated at the moment that atop is started."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-cycl"}),(0,s.jsx)(t.td,{children:"per CPU the effective number of cycles ('cycl') is shown. This value can reach the current CPU frequency if such CPU is 100% busy. When an idle CPU is halted, the number of effective cycles can be (considerably) lower than the current frequency."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-avgf"}),(0,s.jsx)(t.td,{children:"In case that the kernel module 'cpufreq_stats' is active (after issueing 'modprobe cpufreq_stats'), the average frequency ('avgf') is shown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-avgscal"}),(0,s.jsx)(t.td,{children:"In case that the kernel module 'cpufreq_stats' is active (after issueing 'modprobe cpufreq_stats'), the average scaling percentage ('avgscal') is shown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-curf"}),(0,s.jsx)(t.td,{children:"Otherwise the current frequency ('curf') is shown at the moment that the sample is taken."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPU-curscal"}),(0,s.jsx)(t.td,{children:"Otherwise the current scaling percentage ('curscal') is shown at the moment that the sample is taken."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPL-avg1"}),(0,s.jsx)(t.td,{children:"The load average figures reflecting the number of threads that are available to run on a CPU (i.e. part of the runqueue) or that are waiting for disk I/O, over 1 minutes."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPL-avg5"}),(0,s.jsx)(t.td,{children:"The load average figures reflecting the number of threads that are available to run on a CPU (i.e. part of the runqueue) or that are waiting for disk I/O, over 5 minutes."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPL-avg15"}),(0,s.jsx)(t.td,{children:"The load average figures reflecting the number of threads that are available to run on a CPU (i.e. part of the runqueue) or that are waiting for disk I/O, over 15 minutes."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Processor Information(_Total)\\CSwitches"}),(0,s.jsx)(t.td,{children:"The number of context switches ('csw')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPL-intr"}),(0,s.jsx)(t.td,{children:"The number of serviced interrupts ('intr')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CPL-numcpu"}),(0,s.jsx)(t.td,{children:"The number of available CPUs"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-gpubusy"}),(0,s.jsx)(t.td,{children:"The subsequent columns show the percentage of time that one or more kernels were executing on the GPU ('gpubusy')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-membusy"}),(0,s.jsx)(t.td,{children:"The percentage of time that global (device) memory was being read or written ('membusy')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-memocc"}),(0,s.jsx)(t.td,{children:"The occupation percentage of memory ('memocc')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-total"}),(0,s.jsx)(t.td,{children:"The total memory ('total')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-used"}),(0,s.jsx)(t.td,{children:"The memory being in use at the moment of the sample ('used')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-usavg"}),(0,s.jsx)(t.td,{children:"The average memory being in use during the sample time ('usavg')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-#proc"}),(0,s.jsx)(t.td,{children:"The number of processes being active on the GPU at the moment of the sample ('#proc')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GPU-type"}),(0,s.jsx)(t.td,{children:"The type of GPU"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Memory\\Total Byte"}),(0,s.jsx)(t.td,{children:"The total amount of physical memory ('tot')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Memory\\Free Byte"}),(0,s.jsx)(t.td,{children:"The amount of memory which is currently free ('free')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Memory\\Cached Byte"}),(0,s.jsx)(t.td,{children:"The amount of memory in use as page cache including the total resident shared memory ('cache')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-dirty"}),(0,s.jsx)(t.td,{children:"The amount of memory within the page cache that has to be flushed to disk ('dirty')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"\\Memory\\Buffers Byte"}),(0,s.jsx)(t.td,{children:"The amount of memory used for filesystem meta data ('buff')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-slab"}),(0,s.jsx)(t.td,{children:"The amount of memory being used for kernel mallocs ('slab')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-slrec"}),(0,s.jsx)(t.td,{children:"The amount of slab memory that is reclaimable ('slrec')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-shmem"}),(0,s.jsx)(t.td,{children:"The resident size of shared memory including tmpfs ('shmem')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-shrss"}),(0,s.jsx)(t.td,{children:"The resident size of shared memory ('shrss')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-shswp"}),(0,s.jsx)(t.td,{children:"The amount of shared memory that is currently swapped ('shswp')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-vmbal"}),(0,s.jsx)(t.td,{children:"The amount of memory that is currently claimed by vmware's balloon driver ('vmbal')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-zfarc"}),(0,s.jsx)(t.td,{children:"The amount of memory that is currently claimed by the ARC (cache) of ZFSonlinux ('zfarc')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-hptot"}),(0,s.jsx)(t.td,{children:"The amount of memory that is claimed for huge pages ('hptot')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MEM-hpuse"}),(0,s.jsx)(t.td,{children:"The amount of huge page memory that is really in use ('hpuse')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SWP-tot"}),(0,s.jsx)(t.td,{children:"The total amount of swap space on disk ('tot')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SWP-free"}),(0,s.jsx)(t.td,{children:"The amount of free swap space ('free')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SWP-swcac"}),(0,s.jsx)(t.td,{children:"The size of the swap cache ('swcac')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SWP-vmcom"}),(0,s.jsx)(t.td,{children:"The committed virtual memory space ('vmcom')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SWP-vmlim"}),(0,s.jsx)(t.td,{children:"The maximum limit of the committed space ('vmlim', which is by default swap size plus 50% of memory size) is shown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PAG-scan"}),(0,s.jsx)(t.td,{children:"The number of scanned pages ('scan') due to the fact that free memory drops below a particular threshold"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PAG-stall"}),(0,s.jsx)(t.td,{children:"The number times that the kernel tries to reclaim pages due to an urgent need ('stall')."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PAG-swin"}),(0,s.jsx)(t.td,{children:"The number of memory pages the system read from swap space ('swin')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PAG-swout"}),(0,s.jsx)(t.td,{children:"The number of memory pages the system wrote to swap space ('swout') are shown"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PSI"}),(0,s.jsxs)(t.td,{children:["Pressure Stall Information. - ",(0,s.jsx)(t.strong,{children:"NOT ENABLED"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK"}),(0,s.jsx)(t.td,{children:"Logical volume/multiple device/disk utilization."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-busy"}),(0,s.jsx)(t.td,{children:"The busy percentage i.e. the portion of time that the unit was busy handling requests ('busy')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-read"}),(0,s.jsx)(t.td,{children:"The number of read requests issued ('read')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-write"}),(0,s.jsx)(t.td,{children:"The number of write requests issued ('write')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-KiB/r"}),(0,s.jsx)(t.td,{children:"The number of KiBytes per read ('KiB/r')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-KiB/w"}),(0,s.jsx)(t.td,{children:"The number of KiBytes per write ('KiB/w')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-MBr/s"}),(0,s.jsx)(t.td,{children:"The number of MiBytes per second throughput for reads ('MBr/s')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-MBw/s"}),(0,s.jsx)(t.td,{children:"The number of MiBytes per second throughput for writes ('MBw/s')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-avq"}),(0,s.jsx)(t.td,{children:"The average queue depth ('avq')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"LVM/MDD/DSK-avio"}),(0,s.jsx)(t.td,{children:"The average number of milliseconds needed by a request ('avio') for seek, latency and data transfer."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM"}),(0,s.jsx)(t.td,{children:"Network Filesystem (NFS) mount at the client side."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-srv"}),(0,s.jsx)(t.td,{children:"The mounted server directory, the name of the server ('srv')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-read"}),(0,s.jsx)(t.td,{children:"The total number of bytes physically read from the server ('read')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-write"}),(0,s.jsx)(t.td,{children:"The total number of bytes physically written to the server ('write')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-nread"}),(0,s.jsx)(t.td,{children:"Data transfer is subdivided in the number of bytes read via normal read() system calls ('nread')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-nwrit"}),(0,s.jsx)(t.td,{children:"The number of bytes written via normal read() system calls ('nwrit')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-dread"}),(0,s.jsx)(t.td,{children:"The number of bytes read via direct I/O ('dread')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-dwrit"}),(0,s.jsx)(t.td,{children:"The number of bytes written via direct I/O ('dwrit')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-mread"}),(0,s.jsx)(t.td,{children:"The number of bytes read via memory mapped I/O pages ('mread')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFM-mwrit"}),(0,s.jsx)(t.td,{children:"The number of bytes written via memory mapped I/O pages ('mwrit')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFC"}),(0,s.jsxs)(t.td,{children:["Network Filesystem (NFS) client side counters. - ",(0,s.jsx)(t.strong,{children:"NOT ENABLED"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFC-rpc"}),(0,s.jsx)(t.td,{children:"The number of RPC calls issues by local processes ('rpc')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFC-rpwrite"}),(0,s.jsx)(t.td,{children:"The number of read RPC calls ('read') and write RPC calls ('rpwrite') issued to the NFS server"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFC-retxmit"}),(0,s.jsx)(t.td,{children:"The number of RPC calls being retransmitted ('retxmit')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFC-autref"}),(0,s.jsx)(t.td,{children:"The number of authorization refreshes ('autref')."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS"}),(0,s.jsxs)(t.td,{children:["Network Filesystem (NFS) server side counters. - ",(0,s.jsx)(t.strong,{children:"NOT ENABLED"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-rpc"}),(0,s.jsx)(t.td,{children:"The number of RPC calls received from NFS clients ('rpc')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-cwrit"}),(0,s.jsx)(t.td,{children:"The number of read RPC calls received ('cread'), the number of write RPC calls received ('cwrit')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-MBcr/s"}),(0,s.jsx)(t.td,{children:"The number of Megabytes/second returned to read requests by clients ('MBcr/s')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-MBcw/s"}),(0,s.jsx)(t.td,{children:"The number of Megabytes/second passed in write requests by clients ('MBcw/s')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-nettcp"}),(0,s.jsx)(t.td,{children:"The number of network requests handled via TCP ('nettcp')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-netudp"}),(0,s.jsx)(t.td,{children:"The number of network requests handled via UDP ('netudp')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-rcmiss"}),(0,s.jsx)(t.td,{children:"The number of reply cache hits ('rchits'), the number of reply cache misses ('rcmiss')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-rcnoca"}),(0,s.jsx)(t.td,{children:"The number of uncached requests ('rcnoca')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-badfmt"}),(0,s.jsx)(t.td,{children:"The number of requests with a bad format ('badfmt')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-badaut"}),(0,s.jsx)(t.td,{children:"Bad authorization ('badaut')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NFS-badcln"}),(0,s.jsx)(t.td,{children:"The number of bad clients ('badcln')."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-tcpi"}),(0,s.jsx)(t.td,{children:"The number of received TCP segments including those received in error ('tcpi')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-tcpo"}),(0,s.jsx)(t.td,{children:"The number of transmitted TCP segments excluding those containing only retransmitted octets ('tcpo')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-udpi"}),(0,s.jsx)(t.td,{children:"The number of UDP datagrams received ('udpi')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-udpo"}),(0,s.jsx)(t.td,{children:"The number of UDP datagrams transmitted ('udpo')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-tcpao"}),(0,s.jsx)(t.td,{children:"The number of active TCP opens ('tcpao')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-tcppo"}),(0,s.jsx)(t.td,{children:"The number of passive TCP opens ('tcppo')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-tcprs"}),(0,s.jsx)(t.td,{children:"The number of TCP output retransmissions ('tcprs')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-tcpie"}),(0,s.jsx)(t.td,{children:"The number of TCP input errors ('tcpie')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-tcpor"}),(0,s.jsx)(t.td,{children:"The number of TCP output resets ('tcpor')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-udpnp"}),(0,s.jsx)(t.td,{children:"The number of UDP no ports ('udpnp')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-udpie"}),(0,s.jsx)(t.td,{children:"The number of UDP input errors ('udpie')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-ipi"}),(0,s.jsx)(t.td,{children:"The number of IP datagrams received from interfaces, including those received in error ('ipi')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-ipo"}),(0,s.jsx)(t.td,{children:"The number of IP datagrams that local higher-layer protocols offered for transmission ('ipo')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-ipfrw"}),(0,s.jsx)(t.td,{children:"The number of received IP datagrams which were forwarded to other interfaces ('ipfrw')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-deliv"}),(0,s.jsx)(t.td,{children:"The number of IP datagrams which were delivered to local higher-layer protocols ('deliv')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-icmpi"}),(0,s.jsx)(t.td,{children:"The number of received ICMP datagrams ('icmpi')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-icmpo"}),(0,s.jsx)(t.td,{children:"The number of transmitted ICMP datagrams ('icmpo')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-pcki"}),(0,s.jsx)(t.td,{children:"The number of received packets ('pcki')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-pcko"}),(0,s.jsx)(t.td,{children:"The number of transmitted packets ('pcko')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-sp"}),(0,s.jsx)(t.td,{children:"The line speed of the interface ('sp')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-si"}),(0,s.jsx)(t.td,{children:"The effective amount of bits received per second ('si')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-so"}),(0,s.jsx)(t.td,{children:"The effective amount of bits transmitted per second ('so')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-coll"}),(0,s.jsx)(t.td,{children:"The number of collisions ('coll')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-mlti"}),(0,s.jsx)(t.td,{children:"The number of received multicast packets ('mlti')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-erri"}),(0,s.jsx)(t.td,{children:"The number of errors while receiving a packet ('erri')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-erro"}),(0,s.jsx)(t.td,{children:"The number of errors while transmitting a packet ('erro')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-drpi"}),(0,s.jsx)(t.td,{children:"The number of received packets dropped ('drpi')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"NET-drpo"}),(0,s.jsx)(t.td,{children:"The number of transmitted packets dropped ('drpo')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IFB"}),(0,s.jsxs)(t.td,{children:["Infiniband utilization. - ",(0,s.jsx)(t.strong,{children:"NOT ENABLED"})]})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>c});var s=r(6540);const n={},i=s.createContext(n);function d(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);