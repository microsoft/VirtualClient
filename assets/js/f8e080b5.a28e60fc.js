"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[4889],{6155:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=n(4848),r=n(8453);const t={},o="Pbzip2",a={id:"workloads/compression/pbzip2",title:"Pbzip2",description:"PBZIP2 is a parallel implementation of the bzip2 block-sorting file compressor that uses pthreads and achieves near-linear speedup on SMP machines. The output of this version is fully compatible with bzip2 v1.0.2 or newer (ie: anything compressed with pbzip2 can be decompressed with bzip2). PBZIP2 should work on any system that has a pthreads compatible C++ compiler (such as gcc).",source:"@site/docs/workloads/compression/pbzip2.md",sourceDirName:"workloads/compression",slug:"/workloads/compression/pbzip2",permalink:"/VirtualClient/docs/workloads/compression/pbzip2",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/workloads/compression/pbzip2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lzbench",permalink:"/VirtualClient/docs/workloads/compression/lzbench"},next:{title:"CoreMark",permalink:"/VirtualClient/docs/workloads/coremark/"}},d={},l=[{value:"Documentation",id:"documentation",level:3},{value:"Supported Platforms and Architectures",id:"supported-platforms-and-architectures",level:3},{value:"Package Dependencies",id:"package-dependencies",level:3},{value:"Workload Usage",id:"workload-usage",level:3},{value:"What is Being Tested?",id:"what-is-being-tested",level:3}];function c(e){const s={a:"a",h1:"h1",h3:"h3",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"pbzip2",children:"Pbzip2"}),"\n",(0,i.jsx)(s.p,{children:"PBZIP2 is a parallel implementation of the bzip2 block-sorting file compressor that uses pthreads and achieves near-linear speedup on SMP machines. The output of this version is fully compatible with bzip2 v1.0.2 or newer (ie: anything compressed with pbzip2 can be decompressed with bzip2). PBZIP2 should work on any system that has a pthreads compatible C++ compiler (such as gcc)."}),"\n",(0,i.jsx)(s.h3,{id:"documentation",children:"Documentation"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"http://compression.ca/pbzip2/",children:"Pbzip2"})}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"supported-platforms-and-architectures",children:"Supported Platforms and Architectures"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"linux-x64"}),"\n",(0,i.jsx)(s.li,{children:"linux-arm64"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"package-dependencies",children:"Package Dependencies"}),"\n",(0,i.jsx)(s.p,{children:"The following package dependencies are required to be installed on the Unix/Linux system in order to support the requirements\nof the Pbzip2 workload. Note that the Virtual Client will handle the installation of any required dependencies."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"unzip"}),"\n",(0,i.jsx)(s.li,{children:"pbzip2"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"workload-usage",children:"Workload Usage"}),"\n",(0,i.jsx)(s.p,{children:"usage: pbzip2 [ -123456789 ] [ -b#cdfhklm#p#qrS#tvVz ] [ filenames ... ]"}),"\n",(0,i.jsxs)(s.p,{children:["Options: ",(0,i.jsx)("br",{}),"\n-b# ",(0,i.jsx)("br",{}),"\nWhere # is block size in 100k steps (default 9 = 900k) ",(0,i.jsx)("br",{}),"\n-c, --stdout ",(0,i.jsx)("br",{}),"\nOutput to standard out (stdout) ",(0,i.jsx)("br",{}),"\n-d,--decompress ",(0,i.jsx)("br",{}),"\nDecompress file ",(0,i.jsx)("br",{}),"\n-f,--force ",(0,i.jsx)("br",{}),"\nForce, overwrite existing output file ",(0,i.jsx)("br",{}),"\n-h,--help ",(0,i.jsx)("br",{}),"\nPrint this help message ",(0,i.jsx)("br",{}),"\n-k,--keep ",(0,i.jsx)("br",{}),"\nKeep input file, do not delete ",(0,i.jsx)("br",{}),"\n-l,--loadavg ",(0,i.jsx)("br",{}),"\nLoad average determines max number processors to use ",(0,i.jsx)("br",{}),"\n-m# ",(0,i.jsx)("br",{}),"\nWhere # is max memory usage in 1MB steps (default 100 = 100MB) ",(0,i.jsx)("br",{}),"\n-p# ",(0,i.jsx)("br",{}),"\nWhere # is the number of processors (default: autodetect) ",(0,i.jsx)("br",{}),"\n-q,--quiet ",(0,i.jsx)("br",{}),"\nQuiet mode (default) ",(0,i.jsx)("br",{}),"\n-r,--read ",(0,i.jsx)("br",{}),"\nRead entire input file into RAM and split between processors ",(0,i.jsx)("br",{}),"\n-S# ",(0,i.jsx)("br",{}),"\nChild thread stack size in 1KB steps (default stack size if unspecified) ",(0,i.jsx)("br",{}),"\n-t,--test ",(0,i.jsx)("br",{}),"\nTest compressed file integrity ",(0,i.jsx)("br",{}),"\n-v,--verbose ",(0,i.jsx)("br",{}),"\nVerbose mode ",(0,i.jsx)("br",{}),"\n-V ",(0,i.jsx)("br",{}),"\nDisplay version info for pbzip2 then exit ",(0,i.jsx)("br",{}),"\n-z,--compress ",(0,i.jsx)("br",{}),"\nCompress file (default) ",(0,i.jsx)("br",{}),"\n-1,--fast ... -9,--best ",(0,i.jsx)("br",{}),"\nSet BWT block size to 100k .. 900k (default 900k). ",(0,i.jsx)("br",{}),"\n--ignore-trailing-garbage=# ",(0,i.jsx)("br",{}),"\nIgnore trailing garbage flag (1 - ignored; 0 - forbidden) ",(0,i.jsx)("br",{}),"\nIf no file names are given, pbzip2 compresses or decompresses from standard input to standard output."]}),"\n",(0,i.jsxs)(s.p,{children:["Example usage:\npbzip2 -b15k myfile.tar ",(0,i.jsx)("br",{}),"\npbzip2 -p4 -r -5 myfile.tar second*.txt"]}),"\n",(0,i.jsx)(s.h3,{id:"what-is-being-tested",children:"What is Being Tested?"}),"\n",(0,i.jsx)(s.p,{children:"Pbzip2 is used to measure performance in terms of compressionTime, and ratio of compressed size and original size in case of compression and ratio of decompressed size and original size in case of compression. Below are the metrics measured by Pbzip2 Workload."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Name"}),(0,i.jsx)(s.th,{children:"Unit"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"CompressionTime"}),(0,i.jsx)(s.td,{children:"seconds"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Compressed size and Original size ratio"}),(0,i.jsx)(s.td,{children:"-"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Decompressed size and Original size ratio"}),(0,i.jsx)(s.td,{children:"-"})]})]})]}),"\n",(0,i.jsx)(s.h1,{id:"references",children:"References"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"http://compression.ca/pbzip2/",children:"Pbzip2 github"})}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var i=n(6540);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);