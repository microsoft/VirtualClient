"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[540],{1655:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>d});var r=s(4848),i=s(8453);const o={},a="StressAppTest",n={id:"workloads/stressapptest/stressapptest",title:"StressAppTest",description:"Stressful Application Test (or stressapptest, its unix name) is a memory interface test.",source:"@site/docs/workloads/stressapptest/stressapptest.md",sourceDirName:"workloads/stressapptest",slug:"/workloads/stressapptest/",permalink:"/VirtualClient/docs/workloads/stressapptest/",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/workloads/stressapptest/stressapptest.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stress-ng Workload Profiles",permalink:"/VirtualClient/docs/workloads/stress-ng/stress-ng-profiles"},next:{title:"StressAppTest Workload Profiles",permalink:"/VirtualClient/docs/workloads/stressapptest/stressapptest-profiles"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Caveats",id:"caveats",level:2},{value:"Workload Metrics",id:"workload-metrics",level:2}];function c(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"stressapptest",children:"StressAppTest"}),"\n",(0,r.jsx)(t.p,{children:"Stressful Application Test (or stressapptest, its unix name) is a memory interface test.\nIt tries to maximize randomized traffic to memory from processor and I/O, with the intent of creating a realistic high load situation in order\nto test the existing hardware devices in a computer. It is available under the apache 2.0 license."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/stressapptest/stressapptest/blob/master/README.md",children:"StressAppTest Official Documentation"})}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(t.p,{children:"stressapptest is a userspace test, primarily composed of threads doing memory copies and directIO disk read/write. It allocates a large block of\nmemory (typically 94% of the total memory on the machine), and each thread will choose randomized blocks of memory to copy, or to write to disk.\nTypically there are two threads per processor, and two threads for each disk. Result checking is done as the test proceeds by CRCing the data as\nit is copied."}),"\n",(0,r.jsx)(t.p,{children:"Please note that the StressAppTest implementation in Microsoft Virtual Client uses binaries compiled on latest available source code in Nov 2022\non linux-x64 and linux-arm64"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/stressapptest/stressapptest",children:"StressAppTest GitHub Source Code"})}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"caveats",children:"Caveats"}),"\n",(0,r.jsx)(t.p,{children:"This test works by stressing system interfaces. It is good at catching memory signal integrity or setup and hold problems, memory controller and\nbus interface issues, and disk controller issues. It is moderately good at catching bad memory cells and cache coherency issues. It is not good\nat catching bad processors, bad physical media on disks, or problems that require periods of inactivity to manifest themselves. It is not a\nthorough test of OS internals. The test may cause marginal systems to become bricks if disk or memory errors cause hard drive corruption, or\nif the physical components overheat."}),"\n",(0,r.jsx)(t.h2,{id:"workload-metrics",children:"Workload Metrics"}),"\n",(0,r.jsx)(t.p,{children:"The following metrics are examples of those captured by the Virtual Client when running the StressAppTest workload."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:'Note that if the hardwareErrorCount is greater than 0, it denotes an overall StressAppTest failure and some harware error, possibly in the DIMM.\nThe DIMM Slot and other details, as captured by StressAppTest, is added as a "Tag" of the hardwareErrorCount metric, for ease of debugging.'})})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Metric Name"}),(0,r.jsx)(t.th,{children:"Example Value"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"hardwareErrorCount"}),(0,r.jsx)(t.td,{children:"15"})]})})]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>n});var r=s(6540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);