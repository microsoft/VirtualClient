"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[5319],{6574:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>g});var t=o(4848),i=o(8453);const l={},r="Loggers",a={id:"developing/0041-loggers",title:"Loggers",description:"The following documentation covers the different package store options available in Virtual Client used for downloading and installing",source:"@site/docs/developing/0041-loggers.md",sourceDirName:"developing",slug:"/developing/0041-loggers",permalink:"/VirtualClient/docs/developing/0041-loggers",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/developing/0041-loggers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VC Packages",permalink:"/VirtualClient/docs/developing/0040-vc-packages"},next:{title:"Profiler Integration",permalink:"/VirtualClient/docs/developing/0050-develop-profiling-monitor"}},s={},g=[{value:"Console Logger",id:"console-logger",level:2},{value:"File Logger",id:"file-logger",level:2},{value:"EventHub Logger",id:"eventhub-logger",level:2},{value:"Summary File Logger",id:"summary-file-logger",level:2},{value:"Proxy EventHub Logger",id:"proxy-eventhub-logger",level:2},{value:"Proxy Storage Debug File Logger",id:"proxy-storage-debug-file-logger",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"loggers",children:"Loggers"}),"\n",(0,t.jsx)(n.p,{children:"The following documentation covers the different package store options available in Virtual Client used for downloading and installing\ndependencies on the system. Virtual Client supports NuGet feeds as well as Azure Blob stores for hosting dependency packages that need\nto be downloaded to the system during the execution of a workload profile. The following sections describes how this works in the Virtual\nClient."}),"\n",(0,t.jsx)(n.h2,{id:"console-logger",children:"Console Logger"}),"\n",(0,t.jsx)(n.p,{children:"This logger outputs human-readable information on the console output. This is a default VC logger."}),"\n",(0,t.jsx)(n.p,{children:"Console out example for a VC execution with downloading a package."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"[2/25/2025 12:58:02 PM] Platform.Initialize\n[2/25/2025 12:58:02 PM] Experiment ID: c4f27285-8fbc-46de-af4d-b5ca9da627c3\n[2/25/2025 12:58:02 PM] Client ID: USER-ABC\n[2/25/2025 12:58:02 PM] Log To File: False\n[2/25/2025 12:58:02 PM] Log Directory: E:\\Source\\github\\VirtualClient\\out\\bin\\Release\\x64\\VirtualClient.Main\\net8.0\\win-x64\\logs\n[2/25/2025 12:58:02 PM] Package Directory: E:\\Source\\github\\VirtualClient\\out\\bin\\Release\\x64\\VirtualClient.Main\\net8.0\\win-x64\\packages\n[2/25/2025 12:58:02 PM] State Directory: E:\\Source\\github\\VirtualClient\\out\\bin\\Release\\x64\\VirtualClient.Main\\net8.0\\win-x64\\state\n[2/25/2025 12:58:04 PM] Execution Profile: PERF-CPU-GEEKBENCH5\n[2/25/2025 12:58:04 PM] Execution Profile: MONITORS-NONE\n[2/25/2025 12:58:07 PM] ProfileExecution.Begin\n[2/25/2025 12:58:07 PM] Profile: Initialize\n[2/25/2025 12:58:07 PM] Profile: Install Dependencies\n[2/25/2025 12:58:07 PM] Profile: Dependency = DependencyPackageInstallation (scenario=InstallGeekBench5Package)\n[2/25/2025 12:58:07 PM] DependencyPackageInstallation.ExecuteStart\n[2/25/2025 12:58:07 PM] DependencyPackageInstallation.ExecuteStop\n[2/25/2025 12:58:07 PM] RunProfileCommand.End\n[2/25/2025 12:58:07 PM] Exit Code: 0\n[2/25/2025 12:58:07 PM] Flush Telemetry\n[2/25/2025 12:58:09 PM] Flushed\n"})}),"\n",(0,t.jsx)(n.h2,{id:"file-logger",children:"File Logger"}),"\n",(0,t.jsxs)(n.p,{children:["This logger writes machine-readable information on local disk. The log directory typically defaults to ",(0,t.jsx)(n.code,{children:"virtualclient\\logs"})]}),"\n",(0,t.jsx)(n.p,{children:"File logger writes one json file for each type (vc.events, vc.metrics, vc.logs), and one csv file for metrics (metrics.csv)."}),"\n",(0,t.jsx)(n.h2,{id:"eventhub-logger",children:"EventHub Logger"}),"\n",(0,t.jsxs)(n.p,{children:["This logger sends telemetry data to EventHub. EventHub logger is documented in detail at ",(0,t.jsx)(n.a,{href:"/VirtualClient/docs/guides/0610-integration-event-hub",children:"event-hub.md"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"An example to add EventHub logger is to specify '--logger=eventhub=eventhubconnectionstring' on command line."}),"\n",(0,t.jsx)(n.h2,{id:"summary-file-logger",children:"Summary File Logger"}),"\n",(0,t.jsx)(n.p,{children:"--logger=VirtualClient.Logging.SummaryFileLogger"}),"\n",(0,t.jsx)(n.h2,{id:"proxy-eventhub-logger",children:"Proxy EventHub Logger"}),"\n",(0,t.jsx)(n.h2,{id:"proxy-storage-debug-file-logger",children:"Proxy Storage Debug File Logger"})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);