"use strict";(self.webpackChunkvirtualclient=self.webpackChunkvirtualclient||[]).push([[5751],{3935:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var t=a(4848),i=a(8453);const s={},o="VC Packages",r={id:"developing/0040-vc-packages",title:"VC Packages",description:"The following documentation covers the different package store options available in Virtual Client used for downloading and installing",source:"@site/docs/developing/0040-vc-packages.md",sourceDirName:"developing",slug:"/developing/0040-vc-packages",permalink:"/VirtualClient/docs/developing/0040-vc-packages",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/VirtualClient/edit/main/website/docs/developing/0040-vc-packages.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Workload Onboarding Process",permalink:"/VirtualClient/docs/developing/0030-workload-onboarding"},next:{title:"Profiler Integration",permalink:"/VirtualClient/docs/developing/0050-develop-profiling-monitor"}},c={},l=[{value:"Virtual Client Packages (*.vcpkg)",id:"virtual-client-packages-vcpkg",level:2},{value:"Package Definitions",id:"package-definitions",level:2},{value:"Package Naming Conventions",id:"package-naming-conventions",level:2},{value:"Packages with Binaries/Scripts that Run Anywhere",id:"packages-with-binariesscripts-that-run-anywhere",level:2},{value:"Packages with Support for Different Platform/Architectures",id:"packages-with-support-for-different-platformarchitectures",level:2},{value:"Zipping Up Your Packages",id:"zipping-up-your-packages",level:2},{value:"What Packages Are Required",id:"what-packages-are-required",level:2},{value:"Package Search Locations and Priority",id:"package-search-locations-and-priority",level:2},{value:"Package Stores",id:"package-stores",level:2},{value:"Azure Blob Storage",id:"azure-blob-storage",level:3},{value:"Defining a Package Dependency",id:"defining-a-package-dependency",level:4}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"vc-packages",children:"VC Packages"}),"\n",(0,t.jsx)(n.p,{children:"The following documentation covers the different package store options available in Virtual Client used for downloading and installing\ndependencies on the system. Virtual Client supports NuGet feeds as well as Azure Blob stores for hosting dependency packages that need\nto be downloaded to the system during the execution of a workload profile. The following sections describes how this works in the Virtual\nClient."}),"\n",(0,t.jsx)(n.p,{children:"There are a few different types of packages to keep in mind from a general sense: Virtual Client packages (vcpkg) and packages inherent to\nthe OS platform and that are downloaded/installed on the system using common package managers (e.g. apt, debian, chocolatey). The documentation\nbelow covers packages specifically created for direct integration with the Virtual Client."}),"\n",(0,t.jsx)(n.h2,{id:"virtual-client-packages-vcpkg",children:"Virtual Client Packages (*.vcpkg)"}),"\n",(0,t.jsx)(n.p,{children:"Virtual Client packages used by the Virtual Client follow a strict folder schema which is similar to the NuGet package schema. NuGet is well-designed\nfor the purpose of defining dependency packages and additionally has plenty of tooling support that can be easily integrated into the user local development\nprocess as well as the automated/Official build process. This folder schema allows the developer to add support for both cross-platform/OS and cross-architecture/CPU scenarios\nin a single package. This consistency makes it easier to integrate these packages into the Virtual Client for just about any type of dependency. It is recommended\nthat Virtual Client dependency packages be used whenever feasible because they offer the following benefits:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VC Packages ensure consistency in the versions of workloads and monitors to run."}),(0,t.jsx)(n.br,{}),"\n","Self-contained packages ensure that it will be the same EXACT software running every single time. This is important to prevent variations in software versions\ncausing variations in the results/measurements emitted by the software. This is especially important when running VC for longer periods of time with data analysis\nat the end...minimizing variables!"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VC Packages simplify the coding/development requirements."}),(0,t.jsx)(n.br,{}),"\n","By pre-packaging dependencies, developers onboarding new features to the Virtual Client remove a significant amount of work that would otherwise need to be done\nin code. Writing additional code takes time and creates more places in the codes for bugs."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VC Packages help make the runtime dependency installation process more reliable"}),(0,t.jsx)(n.br,{}),"\n","Additional reliability at runtime is created when placing pre-packaged dependencies in storage locations for which the Virtual Client team or the individual developer own.\nThis is because it reduces the number of dependencies on which the application must rely in order to install the dependencies it needs. Were the dependencies to be installed\nfrom a third-party location, the application is subject to the availability of those resource locations without an expedient recourse. The Virtual Client team for example uses Azure\nstorage accounts to host dependency packages because they are highly reliable and can be easily replicated in the case of availability issues/outages."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:'VC Packages enable support for "disconnected" scenarios'}),(0,t.jsx)(n.br,{}),"\n","Dependency packages can be included with the Virtual Client application (within the /packages directory). If the packages are included, the Virtual Client does\nnot have to download the dependencies because they are already on the system. This allows the user to run the Virtual Client in scenarios whereby there may not be\nan internet connection (e.g. private/local network scenarios)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"package-definitions",children:"Package Definitions"}),"\n",(0,t.jsxs)(n.p,{children:["All Virtual Client packages must have a definition file (.vcpkg) in the parent directory. A .vcpkg definition defines the name of the package, version\ninformation and metadata that can be used when implementing components in the Virtual Client that use the packages. As a general rule, the name of the\n.vcpkg file should match the name defined inside of it. Additionally, both the file name and the 'name' within ",(0,t.jsx)("b",{children:"should be lower-cased"}),". This helps avoid\ncasing issues when running in cross-platform scenarios (e.g. Linux, Windows). This file makes Virtual Client packages self-describing."]}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# Example File 1: geekbench5.vcpkg\n{\n    "name": "geekbench5",\n    "description": "GeekBench5 benchmark toolsets.",\n    "metadata": {}\n}\n\n# Example File 2: lshw.vcpkg\n{\n    "name": "lshw",\n    "description": "Hardware lister for Linux toolset.",\n    "version": "B.02.19.59 ",\n    "metadata": {\n        "commit": "https://github.com/lyonel/lshw/commit/996aaad9c760efa6b6ffef8518999ec226af049a"\n    }\n}\n\n# Examplele 3: sqlbackupfiles.vcpkg\n{\n    "name": "sqlbackupfiles",\n    "description": "SQL Server database backup files for restoring full databases on the system.",\n    "metadata": {\n        "databaseName": "tpch1000gcci",\n        "databaseDataFileName": "tpch1000gcci_root",\n        "databaseLogFileName": "tpch1000gcci_log"\n    }\n}\n'})})}),"\n",(0,t.jsx)(n.h2,{id:"package-naming-conventions",children:"Package Naming Conventions"}),"\n",(0,t.jsx)(n.p,{children:"With package folder as they exist on the file system, it is best practice to ensure they are always lower-cased. As a general rule this\nhelps to avoid issues with path conventions between Windows and Unix systems where the former is NOT case-sensitive but the latter IS case-sensitive. It\nis simply easier to go with a pattern that works on both by lower-casing your package directory names. You will see this convention in practice in the\nexamples below."}),"\n",(0,t.jsx)(n.h2,{id:"packages-with-binariesscripts-that-run-anywhere",children:"Packages with Binaries/Scripts that Run Anywhere"}),"\n",(0,t.jsx)(n.p,{children:"Virtual Client supports certain types of workloads/dependencies that can essentially run on 'any' platform/architecture that the Virtual Client itself\nruns on. For example, certain workloads use the Java runtime to operate. The binaries and scripts should be placed in the parent directory alongside\nthe .vcpkg file. The following examples illustrate the expected folder structure."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"/packageroot"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"packagename.vcpkg"}),"\n",(0,t.jsx)(n.li,{children:"Workload or dependency binaries, scripts etc... that can run on any system."}),"\n"]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# Example Package Structure 1\n# ------------------------------------------------------\n# Package = specpower2008.0.0.zip\n# Contains the SPEC Power scripts and toolsets that can run on any system (using the Java Runtime/SDK).\n\n# Contents of package folder\n/specpower2008.0.0/ccs\n/specpower2008.0.0/ssj\n/specpower2008.0.0/specpower2008.vcpkg\n\n# Contents of the specpower2008.vcpkg file\n{\n  "name": "specpower2008",\n  "description": "SPEC Power 2008 workload toolsets.",\n  "version": "2008",\n  "metadata": {}\n}\n\n# Example Package Structure 2\n# ------------------------------------------------------\n# Package = tpch-1tb.zip\n# Contains SQL database backup files that can be used on any system where SQL Server runs.\n\n# Contents of package folder\n/tpch-1tb/sqlbackupfiles.vcpkg\n/tpch-1tb/TPCH-1TB_001.bak\n/tpch-1tb/TPCH-1TB_002.bak\n/tpch-1tb/TPCH-1TB_003.bak\n/tpch-1tb/TPCH-1TB_004.bak\n/tpch-1tb/TPCH-1TB_005.bak\n/tpch-1tb/TPCH-1TB_006.bak\n/tpch-1tb/TPCH-1TB_007.bak\n/tpch-1tb/TPCH-1TB_008.bak\n/tpch-1tb/TPCH-1TB_009.bak\n/tpch-1tb/TPCH-1TB_010.bak\n\n# Contents of the sqlbackupfiles.vcpkg file\n{\n  "name": "sqlbackupfiles",\n  "description": "SQL Server database backup files for restoring full databases on the system.",\n  "metadata": {\n      "databaseName": "tpch1000gcci",\n      "databaseDataFileName": "tpch1000gcci_root",\n      "databaseLogFileName": "tpch1000gcci_log"\n  }\n}\n'})})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"packages-with-support-for-different-platformarchitectures",children:"Packages with Support for Different Platform/Architectures"}),"\n",(0,t.jsx)(n.p,{children:"Virtual Client also supports binaries/scripts that are compiled specific to a set of platform/architectures. For these type of packages, the\nfolder structure should match the platform/architectures that are supported. The following examples illustrate the expected folder structure."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"/packageroot"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"packagename.vcpkg"}),"\n",(0,t.jsxs)(n.li,{children:["/linux-arm64","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Contains workload or dependency binaries, scripts etc... that can run on Linux/ARM64 systems."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["/linux-x64","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Contains workload or dependency binaries, scripts etc... that can run on Linux/x64/amd64 systems."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["/win-arm64","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Contains workload or dependency binaries, scripts etc... that can run on Windows/ARM64 systems."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["/win-x64","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Contains workload or dependency binaries, scripts etc... that can run on Windows/x64/amd64 systems."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# Example Package Structure 1\n# ------------------------------------------------------\n# Package = geekbench5.1.0.0.zip\n\n# Contents of package folder\n/geekbench5.1.0.0/geekbench5.vcpkg\n/geekbench5.1.0.0/linux-arm64/GeekBench5.preferences\n/geekbench5.1.0.0/linux-arm64/geekbench.plar\n/geekbench5.1.0.0/linux-arm64/geekbench_aarch64\n/geekbench5.1.0.0/linux-arm64/geekbench5\n/geekbench5.1.0.0/linux-x64/GeekBench5.preferences\n/geekbench5.1.0.0/linux-x64/geekbench.plar\n/geekbench5.1.0.0/linux-x64/geekbench_x84_64\n/geekbench5.1.0.0/linux-x64/geekbench5\n/geekbench5.1.0.0/win-arm64/GeekBench5.preferences\n/geekbench5.1.0.0/win-arm64/geekbench.plar\n/geekbench5.1.0.0/win-arm64/geekbench_aarch64.exe\n/geekbench5.1.0.0/win-arm64/geekbench5\n/geekbench5.1.0.0/win-x64/GeekBench5.preferences\n/geekbench5.1.0.0/win-x64/geekbench.plar\n/geekbench5.1.0.0/win-x64/geekbench_x84_64.exe\n/geekbench5.1.0.0/win-x64/geekbench5\n\n# Contents of the geekbench5.vcpkg file\n{\n  "name": "geekbench5",\n  "description": "GeekBench5 benchmark toolsets.",\n  "metadata": {}\n}\n'})})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"zipping-up-your-packages",children:"Zipping Up Your Packages"}),"\n",(0,t.jsx)(n.p,{children:"Once you have created the folder structure for your package and have placed all of the binaries, scripts, etc... into the folders where you like,\nthe next step is to zip it up so that it can be uploaded to a package store location (or to a shared folder location on your system or network).\nThere is a handy PowerShell script in source that makes it very easy and ensures the folder structure within the .zip file created remains exactly\nas you defined it. If you have cloned the Virtual Client repo, you will already have the script. You can download it or copy the contents into your own\nfile if not. Note that this requires PowerShell 7."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Why a Script?",(0,t.jsx)(n.br,{}),"\n",'Windows out-of-box "Send to Compressed (zipped) folder" places your directory in a zip file whose name is the same. This duplication of hierarchy is\nnot desirable which is why the VC team uses the custom PowerShell script noted below']}),"\n"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/microsoft/VirtualClient/blob/main/src/VirtualClient/Create-ZipFile.ps1",children:"Create-ZipFile.ps1"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'# Open the PowerShell 7 console and execute the command to zip your package.\nC:\\source\\repos\\virtualclient\\src\\VirtualClient> .\\Create-ZipFile "C:\\Users\\Any\\Desktop\\customworkload.1.2.3" "C:\\Users\\Any\\Desktop\\customworkload.1.2.3.zip"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"what-packages-are-required",children:"What Packages Are Required"}),"\n",(0,t.jsxs)(n.p,{children:["The packages that are used as part of a Virtual Client profile are defined in the 'Dependencies' section of the profile. If custom package locations\nare used, the package name ",(0,t.jsx)("u",{children:"MUST match the name in the profile dependencies"})," (e.g. 'geekbench5' in the example below)."]}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# Package names should be lower-cased ALWAYS\n\n"Dependencies": [\n    {\n        "Type": "DependencyPackageInstallation",\n        "Parameters": {\n            "BlobContainer": "packages",\n            "BlobName": "geekbench5.1.2.0.zip",\n            "PackageName": "geekbench5",\n            "Extract": true\n        }\n    }\n]\n'})})}),"\n",(0,t.jsx)(n.h2,{id:"package-search-locations-and-priority",children:"Package Search Locations and Priority"}),"\n",(0,t.jsx)(n.p,{children:"The Virtual Client application supports both packages that exist on the file system as well as the ability to download packages from a store as is\ndescribed in the sections that follow. In some cases, it is desirable to deploy packages with the Virtual Client application. The following details\ndescribes the order by which Virtual Client searches for packages and the requirements of each search. Note that packages downloaded from a package\nstore will be downloaded to the 'packages' folder and registered (version included)."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"1) Registered package locations"}),(0,t.jsx)(n.br,{}),"\n","The Virtual Client allows a developer to register a package/dependency path at runtime. There are cases where this is useful or convenient\nfor certain scenarios (e.g. installers, installations). A registered package will have a corresponding .vcpkgreg document/definition in the\n'packages' directory of the Virtual Client application."]}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'e.g.\n# Location Registered at Runtime: C:\\any\\custom\\package\\registration\\location\\customtoolset\\1.0.0\n\nC:\\any\\custom\\package\\registration\\location\\customtoolset.1.0.0\nC:\\any\\custom\\package\\registration\\location\\customtoolset.1.0.0\\linux-x64\nC:\\any\\custom\\package\\registration\\location\\customtoolset.1.0.0\\linux-arm64\nC:\\any\\custom\\package\\registration\\location\\customtoolset.1.0.0\\win-x64\nC:\\any\\custom\\package\\registration\\location\\customtoolset.1.0.0\\win-arm64\n\n# Example of the corresponding registration document in the \'packages\' directory\n# C:\\VirtualClient\\state\\customtoolset.vcpkgreg\n{\n    "name": "CustomToolset",\n    "description": "Custom toolset to use with other workload binaries.",\n    "path": "C:\\any\\custom\\package\\registration\\location\\customtoolset.1.0.0",\n    "archivePath": null,\n    "specifics": {}\n}\n'})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"2) Search the folder location defined by a user-defined environment variable"}),(0,t.jsx)(n.br,{}),"\n","A user of the Virtual Client can define an environment variable called ",(0,t.jsx)(n.code,{children:"VC_PACKAGES_PATH"}),". This directory will be used\nto discover packages in addition to the default 'packages' folder location."]}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# e.g.\n# Windows example\nset VC_PACKAGES_PATH=C:\\any\\custom\\packages\\location\n\nC:\\any\\custom\\packages\\location\\geekbench5\nC:\\any\\custom\\packages\\location\\geekbench5\\geekbench5.vcpkg\nC:\\any\\custom\\packages\\location\\geekbench5\\linux-x64\nC:\\any\\custom\\packages\\location\\geekbench5\\linux-arm64\nC:\\any\\custom\\packages\\location\\geekbench5\\win-x64\nC:\\any\\custom\\packages\\location\\geekbench5\\win-arm64\n\n# Linux example\nexport VC_PACKAGES_PATH=/home/user/any/custom/packages/location\n\n/home/user/any/custom/packages/location/geekbench5\n/home/user/any/custom/packages/location/geekbench5/geekbench5.vcpkg\n/home/user/any/custom/packages/location/geekbench5/linux-x64\n/home/user/any/custom/packages/location/geekbench5/linux-arm64\n/home/user/any/custom/packages/location/geekbench5/win-x64\n/home/user/any/custom/packages/location/geekbench5/win-arm64\n"})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"3) Search 'packages' folder location."}),(0,t.jsx)(n.br,{}),"\n","The default package store location is the 'packages' folder within the Virtual Client parent directory. Packages can be placed here\n(or downloaded...see below) into this location. The package .vcpkg definition will be used to register the package in the 'packages'\ndirectory. You can see that a package has been registered by the existence of a .vcpkgreg file in the same directory."]}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# e.g.\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\linux-x64\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\linux-arm64\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\win-x64\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\win-arm64\nC:\\VirtualClient\\packages\\geekbench5.vcpkgreg\n"})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"4) Packages downloaded to the 'packages' folder"}),"\nIf Virtual Client does not find a package pre-existing on the system in the locations noted above, it will download the package into the 'packages' directory.\nThe package will be registered with a .vcpkgreg file in the same directory."]}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Package Name = geekbench5.1.0.0.zip\n# Would be downloaded to the following location.\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\linux-x64\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\linux-arm64\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\win-x64\nC:\\VirtualClient\\packages\\geekbench5.1.0.0\\win-arm64\nC:\\VirtualClient\\packages\\geekbench5.vcpkgreg\n"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"package-stores",children:"Package Stores"}),"\n",(0,t.jsx)(n.p,{children:"The Virtual Client team uses Azure storage accounts to maintain packages that contain workload binaries and dependencies. This enables the Virtual Client team to\nkeep the size of the Virtual Client down to a minimum for deployment purposes while also making it easy for the application to download/integrate dependencies. Indeed\nsome of the workloads and their dependencies have files sizes that exceed multiple gigabytes. Virtual Client allows the user to provide a connection string or SAS token/URI\non the command line so that the packages can be downloaded. The following section describes how to do that."}),"\n",(0,t.jsx)(n.p,{children:"Please contact the Virtual Client team if you do not have questions or need access to the packages stores."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Support for Azure Storage Accounts"}),(0,t.jsx)(n.br,{}),"\n","If the workload package is stored in an Azure storage account store, the following example shows how to provide the required connection string or\nSAS token/URI to the Virtual Client for the container in which the package/blob exists.\nto the Virtual Client in order to authenticate."]}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-script",children:"# Supply the package store connection string or SAS URI like so:\nVirtualClient.exe --profile=PERF-CPU-OPENSSL.json --system=Azure --timeout=1440 --packageStore={BlobStoreConnectionString|SAS URI}\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"azure-blob-storage",children:"Azure Blob Storage"}),"\n",(0,t.jsx)(n.p,{children:'The preferred package store option for the Virtual Client is an Azure storage account blob store. Azure blob stores can host very large\nblock blob packages and have high performance when downloading packages to the system. Additionally, Azure blob stores simplify package download\nrequirements by allowing containers in the blob store to be defined with a "blob anonymous read" access policy. For packages that do not\ncontain any sensitive binaries or information, this is the ideal option because it does not require the Virtual Client or user of the application\nto supply any access keys. Most of the package dependencies used by the Virtual Client contain binaries and content that is publicly available\nand thus can be hosted in the blob store with "blob anonymous read" enabled. The Virtual Client supports containers that require access keys\nto be provided in order to download the packages as well.'}),"\n",(0,t.jsx)(n.h4,{id:"defining-a-package-dependency",children:"Defining a Package Dependency"}),"\n",(0,t.jsx)(n.p,{children:"To define a package dependency for a given workload, insert a 'DependencyPackageInstallation' dependency in the workload profile. The package store\nconnection string or SAS URI must be supplied on the command line as noted above."}),"\n",(0,t.jsx)("div",{class:"code-section",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Description": "OpenSSL 3.0 CPU Performance Workload",\n    "Actions": [\n        {\n            "Type": "OpenSslExecutor",\n            "Parameters": {\n                "CommandArguments": "speed -elapsed -evp md5 -seconds 100",\n                "PackageName": "openssl",\n                "Tags": "CPU,OpenSSL,Cryptography"\n            }\n        }\n    ],\n    "Dependencies": [\n        {\n            "Type": "DependencyPackageInstallation",\n            "Parameters": {\n                "BlobContainer": "packages",\n                "BlobName": "openssl.1.1.0.zip",\n                "PackageName": "openssl",\n                "Extract": true\n            }\n        }\n    ]\n}\n'})})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var t=a(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);